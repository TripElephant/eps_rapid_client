# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PropertyContentDescriptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amenities': 'str',
        'dining': 'str',
        'renovations': 'str',
        'national_ratings': 'str',
        'business_amenities': 'str',
        'rooms': 'str',
        'attractions': 'str',
        'location': 'str',
        'headline': 'str'
    }

    attribute_map = {
        'amenities': 'amenities',
        'dining': 'dining',
        'renovations': 'renovations',
        'national_ratings': 'national_ratings',
        'business_amenities': 'business_amenities',
        'rooms': 'rooms',
        'attractions': 'attractions',
        'location': 'location',
        'headline': 'headline'
    }

    def __init__(self, amenities=None, dining=None, renovations=None, national_ratings=None, business_amenities=None, rooms=None, attractions=None, location=None, headline=None):  # noqa: E501
        """PropertyContentDescriptions - a model defined in Swagger"""  # noqa: E501

        self._amenities = None
        self._dining = None
        self._renovations = None
        self._national_ratings = None
        self._business_amenities = None
        self._rooms = None
        self._attractions = None
        self._location = None
        self._headline = None
        self.discriminator = None

        if amenities is not None:
            self.amenities = amenities
        if dining is not None:
            self.dining = dining
        if renovations is not None:
            self.renovations = renovations
        if national_ratings is not None:
            self.national_ratings = national_ratings
        if business_amenities is not None:
            self.business_amenities = business_amenities
        if rooms is not None:
            self.rooms = rooms
        if attractions is not None:
            self.attractions = attractions
        if location is not None:
            self.location = location
        if headline is not None:
            self.headline = headline

    @property
    def amenities(self):
        """Gets the amenities of this PropertyContentDescriptions.  # noqa: E501

        Describes general building amenities at the property.  # noqa: E501

        :return: The amenities of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this PropertyContentDescriptions.

        Describes general building amenities at the property.  # noqa: E501

        :param amenities: The amenities of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._amenities = amenities

    @property
    def dining(self):
        """Gets the dining of this PropertyContentDescriptions.  # noqa: E501

        Describes dining accommodations at the property.  # noqa: E501

        :return: The dining of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._dining

    @dining.setter
    def dining(self, dining):
        """Sets the dining of this PropertyContentDescriptions.

        Describes dining accommodations at the property.  # noqa: E501

        :param dining: The dining of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._dining = dining

    @property
    def renovations(self):
        """Gets the renovations of this PropertyContentDescriptions.  # noqa: E501

        Describes any recent room or property renovations.  # noqa: E501

        :return: The renovations of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._renovations

    @renovations.setter
    def renovations(self, renovations):
        """Sets the renovations of this PropertyContentDescriptions.

        Describes any recent room or property renovations.  # noqa: E501

        :param renovations: The renovations of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._renovations = renovations

    @property
    def national_ratings(self):
        """Gets the national_ratings of this PropertyContentDescriptions.  # noqa: E501

        States the source of the property's star rating (such as a regional or national tourism agency) and any other ratings claimed.  # noqa: E501

        :return: The national_ratings of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._national_ratings

    @national_ratings.setter
    def national_ratings(self, national_ratings):
        """Sets the national_ratings of this PropertyContentDescriptions.

        States the source of the property's star rating (such as a regional or national tourism agency) and any other ratings claimed.  # noqa: E501

        :param national_ratings: The national_ratings of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._national_ratings = national_ratings

    @property
    def business_amenities(self):
        """Gets the business_amenities of this PropertyContentDescriptions.  # noqa: E501

        Describes any business-specific amenities at the property, e.g. conference rooms.  # noqa: E501

        :return: The business_amenities of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._business_amenities

    @business_amenities.setter
    def business_amenities(self, business_amenities):
        """Sets the business_amenities of this PropertyContentDescriptions.

        Describes any business-specific amenities at the property, e.g. conference rooms.  # noqa: E501

        :param business_amenities: The business_amenities of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._business_amenities = business_amenities

    @property
    def rooms(self):
        """Gets the rooms of this PropertyContentDescriptions.  # noqa: E501

        Describes typical room amenities.  # noqa: E501

        :return: The rooms of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this PropertyContentDescriptions.

        Describes typical room amenities.  # noqa: E501

        :param rooms: The rooms of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._rooms = rooms

    @property
    def attractions(self):
        """Gets the attractions of this PropertyContentDescriptions.  # noqa: E501

        Nearby attractions/areas, often including distances from the property.  # noqa: E501

        :return: The attractions of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._attractions

    @attractions.setter
    def attractions(self, attractions):
        """Sets the attractions of this PropertyContentDescriptions.

        Nearby attractions/areas, often including distances from the property.  # noqa: E501

        :param attractions: The attractions of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._attractions = attractions

    @property
    def location(self):
        """Gets the location of this PropertyContentDescriptions.  # noqa: E501

        General location as entered by the property.  # noqa: E501

        :return: The location of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PropertyContentDescriptions.

        General location as entered by the property.  # noqa: E501

        :param location: The location of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def headline(self):
        """Gets the headline of this PropertyContentDescriptions.  # noqa: E501

        A headline description for the property.  # noqa: E501

        :return: The headline of this PropertyContentDescriptions.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this PropertyContentDescriptions.

        A headline description for the property.  # noqa: E501

        :param headline: The headline of this PropertyContentDescriptions.  # noqa: E501
        :type: str
        """

        self._headline = headline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyContentDescriptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyContentDescriptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
