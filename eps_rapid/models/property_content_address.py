# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.property_content_address_localized import PropertyContentAddressLocalized  # noqa: F401,E501


class PropertyContentAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line_1': 'str',
        'line_2': 'str',
        'city': 'str',
        'state_province_code': 'str',
        'state_province_name': 'str',
        'postal_code': 'str',
        'country_code': 'str',
        'obfuscated': 'bool',
        'localized': 'PropertyContentAddressLocalized'
    }

    attribute_map = {
        'line_1': 'line_1',
        'line_2': 'line_2',
        'city': 'city',
        'state_province_code': 'state_province_code',
        'state_province_name': 'state_province_name',
        'postal_code': 'postal_code',
        'country_code': 'country_code',
        'obfuscated': 'obfuscated',
        'localized': 'localized'
    }

    def __init__(self, line_1=None, line_2=None, city=None, state_province_code=None, state_province_name=None, postal_code=None, country_code=None, obfuscated=None, localized=None):  # noqa: E501
        """PropertyContentAddress - a model defined in Swagger"""  # noqa: E501

        self._line_1 = None
        self._line_2 = None
        self._city = None
        self._state_province_code = None
        self._state_province_name = None
        self._postal_code = None
        self._country_code = None
        self._obfuscated = None
        self._localized = None
        self.discriminator = None

        if line_1 is not None:
            self.line_1 = line_1
        if line_2 is not None:
            self.line_2 = line_2
        if city is not None:
            self.city = city
        if state_province_code is not None:
            self.state_province_code = state_province_code
        if state_province_name is not None:
            self.state_province_name = state_province_name
        if postal_code is not None:
            self.postal_code = postal_code
        if country_code is not None:
            self.country_code = country_code
        if obfuscated is not None:
            self.obfuscated = obfuscated
        if localized is not None:
            self.localized = localized

    @property
    def line_1(self):
        """Gets the line_1 of this PropertyContentAddress.  # noqa: E501

        Address line 1.  # noqa: E501

        :return: The line_1 of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._line_1

    @line_1.setter
    def line_1(self, line_1):
        """Sets the line_1 of this PropertyContentAddress.

        Address line 1.  # noqa: E501

        :param line_1: The line_1 of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._line_1 = line_1

    @property
    def line_2(self):
        """Gets the line_2 of this PropertyContentAddress.  # noqa: E501

        Address line 2.  # noqa: E501

        :return: The line_2 of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._line_2

    @line_2.setter
    def line_2(self, line_2):
        """Sets the line_2 of this PropertyContentAddress.

        Address line 2.  # noqa: E501

        :param line_2: The line_2 of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._line_2 = line_2

    @property
    def city(self):
        """Gets the city of this PropertyContentAddress.  # noqa: E501

        City.  # noqa: E501

        :return: The city of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PropertyContentAddress.

        City.  # noqa: E501

        :param city: The city of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state_province_code(self):
        """Gets the state_province_code of this PropertyContentAddress.  # noqa: E501

        2-letter or 3-letter state/province code for Australia, Canada and the USA.  # noqa: E501

        :return: The state_province_code of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_province_code

    @state_province_code.setter
    def state_province_code(self, state_province_code):
        """Sets the state_province_code of this PropertyContentAddress.

        2-letter or 3-letter state/province code for Australia, Canada and the USA.  # noqa: E501

        :param state_province_code: The state_province_code of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._state_province_code = state_province_code

    @property
    def state_province_name(self):
        """Gets the state_province_name of this PropertyContentAddress.  # noqa: E501

        Text name of the State/Province - more common for additional countries.  # noqa: E501

        :return: The state_province_name of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_province_name

    @state_province_name.setter
    def state_province_name(self, state_province_name):
        """Sets the state_province_name of this PropertyContentAddress.

        Text name of the State/Province - more common for additional countries.  # noqa: E501

        :param state_province_name: The state_province_name of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._state_province_name = state_province_name

    @property
    def postal_code(self):
        """Gets the postal_code of this PropertyContentAddress.  # noqa: E501

        Postal/zip code.  # noqa: E501

        :return: The postal_code of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PropertyContentAddress.

        Postal/zip code.  # noqa: E501

        :param postal_code: The postal_code of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_code(self):
        """Gets the country_code of this PropertyContentAddress.  # noqa: E501

        2-letter country code, in ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The country_code of this PropertyContentAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PropertyContentAddress.

        2-letter country code, in ISO 3166-1 alpha-2 format.  # noqa: E501

        :param country_code: The country_code of this PropertyContentAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def obfuscated(self):
        """Gets the obfuscated of this PropertyContentAddress.  # noqa: E501

        Flag to indicate whether a property address requires obfuscation before the property has been booked. If true, only the city, province, and country of the address can be shown to the customer.  # noqa: E501

        :return: The obfuscated of this PropertyContentAddress.  # noqa: E501
        :rtype: bool
        """
        return self._obfuscated

    @obfuscated.setter
    def obfuscated(self, obfuscated):
        """Sets the obfuscated of this PropertyContentAddress.

        Flag to indicate whether a property address requires obfuscation before the property has been booked. If true, only the city, province, and country of the address can be shown to the customer.  # noqa: E501

        :param obfuscated: The obfuscated of this PropertyContentAddress.  # noqa: E501
        :type: bool
        """

        self._obfuscated = obfuscated

    @property
    def localized(self):
        """Gets the localized of this PropertyContentAddress.  # noqa: E501


        :return: The localized of this PropertyContentAddress.  # noqa: E501
        :rtype: PropertyContentAddressLocalized
        """
        return self._localized

    @localized.setter
    def localized(self, localized):
        """Sets the localized of this PropertyContentAddress.


        :param localized: The localized of this PropertyContentAddress.  # noqa: E501
        :type: PropertyContentAddressLocalized
        """

        self._localized = localized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyContentAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyContentAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
