# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.billing_contact import BillingContact  # noqa: F401,E501
from eps_rapid.models.conversations import Conversations  # noqa: F401,E501
from eps_rapid.models.retrieve_adjustment import RetrieveAdjustment  # noqa: F401,E501
from eps_rapid.models.retrieve_links import RetrieveLinks  # noqa: F401,E501
from eps_rapid.models.retrieve_rooms import RetrieveRooms  # noqa: F401,E501


class Retrieve(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'itinerary_id': 'str',
        'property_id': 'str',
        'links': 'RetrieveLinks',
        'rooms': 'list[RetrieveRooms]',
        'billing_contact': 'BillingContact',
        'adjustment': 'RetrieveAdjustment',
        'creation_date_time': 'str',
        'affiliate_reference_id': 'str',
        'affiliate_metadata': 'str',
        'conversations': 'Conversations'
    }

    attribute_map = {
        'itinerary_id': 'itinerary_id',
        'property_id': 'property_id',
        'links': 'links',
        'rooms': 'rooms',
        'billing_contact': 'billing_contact',
        'adjustment': 'adjustment',
        'creation_date_time': 'creation_date_time',
        'affiliate_reference_id': 'affiliate_reference_id',
        'affiliate_metadata': 'affiliate_metadata',
        'conversations': 'conversations'
    }

    def __init__(self, itinerary_id=None, property_id=None, links=None, rooms=None, billing_contact=None, adjustment=None, creation_date_time=None, affiliate_reference_id=None, affiliate_metadata=None, conversations=None):  # noqa: E501
        """Retrieve - a model defined in Swagger"""  # noqa: E501

        self._itinerary_id = None
        self._property_id = None
        self._links = None
        self._rooms = None
        self._billing_contact = None
        self._adjustment = None
        self._creation_date_time = None
        self._affiliate_reference_id = None
        self._affiliate_metadata = None
        self._conversations = None
        self.discriminator = None

        self.itinerary_id = itinerary_id
        if property_id is not None:
            self.property_id = property_id
        if links is not None:
            self.links = links
        if rooms is not None:
            self.rooms = rooms
        if billing_contact is not None:
            self.billing_contact = billing_contact
        if adjustment is not None:
            self.adjustment = adjustment
        self.creation_date_time = creation_date_time
        if affiliate_reference_id is not None:
            self.affiliate_reference_id = affiliate_reference_id
        if affiliate_metadata is not None:
            self.affiliate_metadata = affiliate_metadata
        if conversations is not None:
            self.conversations = conversations

    @property
    def itinerary_id(self):
        """Gets the itinerary_id of this Retrieve.  # noqa: E501

        The itinerary id.  # noqa: E501

        :return: The itinerary_id of this Retrieve.  # noqa: E501
        :rtype: str
        """
        return self._itinerary_id

    @itinerary_id.setter
    def itinerary_id(self, itinerary_id):
        """Sets the itinerary_id of this Retrieve.

        The itinerary id.  # noqa: E501

        :param itinerary_id: The itinerary_id of this Retrieve.  # noqa: E501
        :type: str
        """
        if itinerary_id is None:
            raise ValueError("Invalid value for `itinerary_id`, must not be `None`")  # noqa: E501

        self._itinerary_id = itinerary_id

    @property
    def property_id(self):
        """Gets the property_id of this Retrieve.  # noqa: E501

        The property id.  # noqa: E501

        :return: The property_id of this Retrieve.  # noqa: E501
        :rtype: str
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this Retrieve.

        The property id.  # noqa: E501

        :param property_id: The property_id of this Retrieve.  # noqa: E501
        :type: str
        """

        self._property_id = property_id

    @property
    def links(self):
        """Gets the links of this Retrieve.  # noqa: E501


        :return: The links of this Retrieve.  # noqa: E501
        :rtype: RetrieveLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Retrieve.


        :param links: The links of this Retrieve.  # noqa: E501
        :type: RetrieveLinks
        """

        self._links = links

    @property
    def rooms(self):
        """Gets the rooms of this Retrieve.  # noqa: E501


        :return: The rooms of this Retrieve.  # noqa: E501
        :rtype: list[RetrieveRooms]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this Retrieve.


        :param rooms: The rooms of this Retrieve.  # noqa: E501
        :type: list[RetrieveRooms]
        """

        self._rooms = rooms

    @property
    def billing_contact(self):
        """Gets the billing_contact of this Retrieve.  # noqa: E501


        :return: The billing_contact of this Retrieve.  # noqa: E501
        :rtype: BillingContact
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """Sets the billing_contact of this Retrieve.


        :param billing_contact: The billing_contact of this Retrieve.  # noqa: E501
        :type: BillingContact
        """

        self._billing_contact = billing_contact

    @property
    def adjustment(self):
        """Gets the adjustment of this Retrieve.  # noqa: E501


        :return: The adjustment of this Retrieve.  # noqa: E501
        :rtype: RetrieveAdjustment
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this Retrieve.


        :param adjustment: The adjustment of this Retrieve.  # noqa: E501
        :type: RetrieveAdjustment
        """

        self._adjustment = adjustment

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this Retrieve.  # noqa: E501

        The creation date/time of the booking.  # noqa: E501

        :return: The creation_date_time of this Retrieve.  # noqa: E501
        :rtype: str
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this Retrieve.

        The creation date/time of the booking.  # noqa: E501

        :param creation_date_time: The creation_date_time of this Retrieve.  # noqa: E501
        :type: str
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def affiliate_reference_id(self):
        """Gets the affiliate_reference_id of this Retrieve.  # noqa: E501

        Your unique reference value. This field supports a maximum of 28 characters and is required to be unique (if provided).  # noqa: E501

        :return: The affiliate_reference_id of this Retrieve.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_reference_id

    @affiliate_reference_id.setter
    def affiliate_reference_id(self, affiliate_reference_id):
        """Sets the affiliate_reference_id of this Retrieve.

        Your unique reference value. This field supports a maximum of 28 characters and is required to be unique (if provided).  # noqa: E501

        :param affiliate_reference_id: The affiliate_reference_id of this Retrieve.  # noqa: E501
        :type: str
        """

        self._affiliate_reference_id = affiliate_reference_id

    @property
    def affiliate_metadata(self):
        """Gets the affiliate_metadata of this Retrieve.  # noqa: E501

        Field that stores up to 256 characters of additional metadata with the itinerary, uniqueness is not required.  # noqa: E501

        :return: The affiliate_metadata of this Retrieve.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_metadata

    @affiliate_metadata.setter
    def affiliate_metadata(self, affiliate_metadata):
        """Sets the affiliate_metadata of this Retrieve.

        Field that stores up to 256 characters of additional metadata with the itinerary, uniqueness is not required.  # noqa: E501

        :param affiliate_metadata: The affiliate_metadata of this Retrieve.  # noqa: E501
        :type: str
        """

        self._affiliate_metadata = affiliate_metadata

    @property
    def conversations(self):
        """Gets the conversations of this Retrieve.  # noqa: E501


        :return: The conversations of this Retrieve.  # noqa: E501
        :rtype: Conversations
        """
        return self._conversations

    @conversations.setter
    def conversations(self, conversations):
        """Sets the conversations of this Retrieve.


        :param conversations: The conversations of this Retrieve.  # noqa: E501
        :type: Conversations
        """

        self._conversations = conversations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Retrieve, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Retrieve):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
