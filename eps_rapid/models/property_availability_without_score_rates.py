# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.amenity import Amenity  # noqa: F401,E501
from eps_rapid.models.bed_group_availability import BedGroupAvailability  # noqa: F401,E501
from eps_rapid.models.link import Link  # noqa: F401,E501
from eps_rapid.models.property_availability_without_score_cancel_penalties import PropertyAvailabilityWithoutScoreCancelPenalties  # noqa: F401,E501
from eps_rapid.models.property_availability_without_score_promotions import PropertyAvailabilityWithoutScorePromotions  # noqa: F401,E501
from eps_rapid.models.room_rates import RoomRates  # noqa: F401,E501


class PropertyAvailabilityWithoutScoreRates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'available_rooms': 'float',
        'refundable': 'bool',
        'fenced_deal': 'bool',
        'fenced_deal_available': 'bool',
        'deposit_required': 'bool',
        'merchant_of_record': 'str',
        'amenities': 'dict(str, Amenity)',
        'links': 'dict(str, Link)',
        'bed_groups': 'dict(str, BedGroupAvailability)',
        'cancel_penalties': 'list[PropertyAvailabilityWithoutScoreCancelPenalties]',
        'occupancy_pricing': 'RoomRates',
        'promotions': 'PropertyAvailabilityWithoutScorePromotions'
    }

    attribute_map = {
        'id': 'id',
        'available_rooms': 'available_rooms',
        'refundable': 'refundable',
        'fenced_deal': 'fenced_deal',
        'fenced_deal_available': 'fenced_deal_available',
        'deposit_required': 'deposit_required',
        'merchant_of_record': 'merchant_of_record',
        'amenities': 'amenities',
        'links': 'links',
        'bed_groups': 'bed_groups',
        'cancel_penalties': 'cancel_penalties',
        'occupancy_pricing': 'occupancy_pricing',
        'promotions': 'promotions'
    }

    def __init__(self, id=None, available_rooms=None, refundable=None, fenced_deal=None, fenced_deal_available=None, deposit_required=None, merchant_of_record=None, amenities=None, links=None, bed_groups=None, cancel_penalties=None, occupancy_pricing=None, promotions=None):  # noqa: E501
        """PropertyAvailabilityWithoutScoreRates - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._available_rooms = None
        self._refundable = None
        self._fenced_deal = None
        self._fenced_deal_available = None
        self._deposit_required = None
        self._merchant_of_record = None
        self._amenities = None
        self._links = None
        self._bed_groups = None
        self._cancel_penalties = None
        self._occupancy_pricing = None
        self._promotions = None
        self.discriminator = None

        self.id = id
        self.available_rooms = available_rooms
        self.refundable = refundable
        self.fenced_deal = fenced_deal
        self.fenced_deal_available = fenced_deal_available
        self.deposit_required = deposit_required
        self.merchant_of_record = merchant_of_record
        if amenities is not None:
            self.amenities = amenities
        self.links = links
        if bed_groups is not None:
            self.bed_groups = bed_groups
        if cancel_penalties is not None:
            self.cancel_penalties = cancel_penalties
        self.occupancy_pricing = occupancy_pricing
        if promotions is not None:
            self.promotions = promotions

    @property
    def id(self):
        """Gets the id of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        Unique Identifier for a rate.  # noqa: E501

        :return: The id of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PropertyAvailabilityWithoutScoreRates.

        Unique Identifier for a rate.  # noqa: E501

        :param id: The id of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def available_rooms(self):
        """Gets the available_rooms of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        The number of bookable rooms remaining with this rate in EPS inventory. Use this value to create rules for urgency messaging to alert users to low availability on busy travel dates or at popular properties. If the value returns as 2147483647 (max int value), the actual value could not be determined. Ensure your urgency messaging ignores such instances when returned.  # noqa: E501

        :return: The available_rooms of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: float
        """
        return self._available_rooms

    @available_rooms.setter
    def available_rooms(self, available_rooms):
        """Sets the available_rooms of this PropertyAvailabilityWithoutScoreRates.

        The number of bookable rooms remaining with this rate in EPS inventory. Use this value to create rules for urgency messaging to alert users to low availability on busy travel dates or at popular properties. If the value returns as 2147483647 (max int value), the actual value could not be determined. Ensure your urgency messaging ignores such instances when returned.  # noqa: E501

        :param available_rooms: The available_rooms of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: float
        """
        if available_rooms is None:
            raise ValueError("Invalid value for `available_rooms`, must not be `None`")  # noqa: E501

        self._available_rooms = available_rooms

    @property
    def refundable(self):
        """Gets the refundable of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        Indicates if the rate is fully refundable at the time of booking. Cancel penalties may still apply. Please refer to the cancel penalties section for reference.  # noqa: E501

        :return: The refundable of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: bool
        """
        return self._refundable

    @refundable.setter
    def refundable(self, refundable):
        """Sets the refundable of this PropertyAvailabilityWithoutScoreRates.

        Indicates if the rate is fully refundable at the time of booking. Cancel penalties may still apply. Please refer to the cancel penalties section for reference.  # noqa: E501

        :param refundable: The refundable of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: bool
        """
        if refundable is None:
            raise ValueError("Invalid value for `refundable`, must not be `None`")  # noqa: E501

        self._refundable = refundable

    @property
    def fenced_deal(self):
        """Gets the fenced_deal of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        Indicates that a \"Member Only Deal\" discount has been applied to the rate. Partners must be enabled to receive \"Member Only Deals\" to benefit from this parameter. If interested, partners should speak to their account representatives. This parameter can be used to merchandise if a \"Member Only Deal\" has been applied which will help partners to drive loyalty. In addition, it can be used by OTA's to create an opaque but public shopping experience.  # noqa: E501

        :return: The fenced_deal of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: bool
        """
        return self._fenced_deal

    @fenced_deal.setter
    def fenced_deal(self, fenced_deal):
        """Sets the fenced_deal of this PropertyAvailabilityWithoutScoreRates.

        Indicates that a \"Member Only Deal\" discount has been applied to the rate. Partners must be enabled to receive \"Member Only Deals\" to benefit from this parameter. If interested, partners should speak to their account representatives. This parameter can be used to merchandise if a \"Member Only Deal\" has been applied which will help partners to drive loyalty. In addition, it can be used by OTA's to create an opaque but public shopping experience.  # noqa: E501

        :param fenced_deal: The fenced_deal of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: bool
        """
        if fenced_deal is None:
            raise ValueError("Invalid value for `fenced_deal`, must not be `None`")  # noqa: E501

        self._fenced_deal = fenced_deal

    @property
    def fenced_deal_available(self):
        """Gets the fenced_deal_available of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        Indicates if a \"Member Only Deal\" is available for this rate.  # noqa: E501

        :return: The fenced_deal_available of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: bool
        """
        return self._fenced_deal_available

    @fenced_deal_available.setter
    def fenced_deal_available(self, fenced_deal_available):
        """Sets the fenced_deal_available of this PropertyAvailabilityWithoutScoreRates.

        Indicates if a \"Member Only Deal\" is available for this rate.  # noqa: E501

        :param fenced_deal_available: The fenced_deal_available of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: bool
        """
        if fenced_deal_available is None:
            raise ValueError("Invalid value for `fenced_deal_available`, must not be `None`")  # noqa: E501

        self._fenced_deal_available = fenced_deal_available

    @property
    def deposit_required(self):
        """Gets the deposit_required of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        If a deposit is required for the rate, this value will be `true`. A \"deposit_policies\" link will be included in this response to retrieve more information about the deposit, including amounts and timing.  # noqa: E501

        :return: The deposit_required of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_required

    @deposit_required.setter
    def deposit_required(self, deposit_required):
        """Sets the deposit_required of this PropertyAvailabilityWithoutScoreRates.

        If a deposit is required for the rate, this value will be `true`. A \"deposit_policies\" link will be included in this response to retrieve more information about the deposit, including amounts and timing.  # noqa: E501

        :param deposit_required: The deposit_required of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: bool
        """
        if deposit_required is None:
            raise ValueError("Invalid value for `deposit_required`, must not be `None`")  # noqa: E501

        self._deposit_required = deposit_required

    @property
    def merchant_of_record(self):
        """Gets the merchant_of_record of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        * `expedia` - Payment is taken by Expedia. The payment options avaliable can be discovered using the \"payment-options\" link in the response. This includes AFFILIATE_COLLECT payments. * `property` - Payment is taken by the property.   # noqa: E501

        :return: The merchant_of_record of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: str
        """
        return self._merchant_of_record

    @merchant_of_record.setter
    def merchant_of_record(self, merchant_of_record):
        """Sets the merchant_of_record of this PropertyAvailabilityWithoutScoreRates.

        * `expedia` - Payment is taken by Expedia. The payment options avaliable can be discovered using the \"payment-options\" link in the response. This includes AFFILIATE_COLLECT payments. * `property` - Payment is taken by the property.   # noqa: E501

        :param merchant_of_record: The merchant_of_record of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: str
        """
        if merchant_of_record is None:
            raise ValueError("Invalid value for `merchant_of_record`, must not be `None`")  # noqa: E501
        allowed_values = ["expedia", "property"]  # noqa: E501
        if merchant_of_record not in allowed_values:
            raise ValueError(
                "Invalid value for `merchant_of_record` ({0}), must be one of {1}"  # noqa: E501
                .format(merchant_of_record, allowed_values)
            )

        self._merchant_of_record = merchant_of_record

    @property
    def amenities(self):
        """Gets the amenities of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        Room amenities.  # noqa: E501

        :return: The amenities of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: dict(str, Amenity)
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this PropertyAvailabilityWithoutScoreRates.

        Room amenities.  # noqa: E501

        :param amenities: The amenities of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: dict(str, Amenity)
        """

        self._amenities = amenities

    @property
    def links(self):
        """Gets the links of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        A map of links, including links to request payment options and deposit policies.  # noqa: E501

        :return: The links of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: dict(str, Link)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PropertyAvailabilityWithoutScoreRates.

        A map of links, including links to request payment options and deposit policies.  # noqa: E501

        :param links: The links of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: dict(str, Link)
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def bed_groups(self):
        """Gets the bed_groups of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        A map of the room's bed groups.  # noqa: E501

        :return: The bed_groups of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: dict(str, BedGroupAvailability)
        """
        return self._bed_groups

    @bed_groups.setter
    def bed_groups(self, bed_groups):
        """Sets the bed_groups of this PropertyAvailabilityWithoutScoreRates.

        A map of the room's bed groups.  # noqa: E501

        :param bed_groups: The bed_groups of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: dict(str, BedGroupAvailability)
        """

        self._bed_groups = bed_groups

    @property
    def cancel_penalties(self):
        """Gets the cancel_penalties of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501

        Array of `cancel_penalty` objects containing cancel penalty information. Will not be populated on non refundable.  # noqa: E501

        :return: The cancel_penalties of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: list[PropertyAvailabilityWithoutScoreCancelPenalties]
        """
        return self._cancel_penalties

    @cancel_penalties.setter
    def cancel_penalties(self, cancel_penalties):
        """Sets the cancel_penalties of this PropertyAvailabilityWithoutScoreRates.

        Array of `cancel_penalty` objects containing cancel penalty information. Will not be populated on non refundable.  # noqa: E501

        :param cancel_penalties: The cancel_penalties of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: list[PropertyAvailabilityWithoutScoreCancelPenalties]
        """

        self._cancel_penalties = cancel_penalties

    @property
    def occupancy_pricing(self):
        """Gets the occupancy_pricing of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501


        :return: The occupancy_pricing of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: RoomRates
        """
        return self._occupancy_pricing

    @occupancy_pricing.setter
    def occupancy_pricing(self, occupancy_pricing):
        """Sets the occupancy_pricing of this PropertyAvailabilityWithoutScoreRates.


        :param occupancy_pricing: The occupancy_pricing of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: RoomRates
        """
        if occupancy_pricing is None:
            raise ValueError("Invalid value for `occupancy_pricing`, must not be `None`")  # noqa: E501

        self._occupancy_pricing = occupancy_pricing

    @property
    def promotions(self):
        """Gets the promotions of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501


        :return: The promotions of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :rtype: PropertyAvailabilityWithoutScorePromotions
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this PropertyAvailabilityWithoutScoreRates.


        :param promotions: The promotions of this PropertyAvailabilityWithoutScoreRates.  # noqa: E501
        :type: PropertyAvailabilityWithoutScorePromotions
        """

        self._promotions = promotions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyAvailabilityWithoutScoreRates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyAvailabilityWithoutScoreRates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
