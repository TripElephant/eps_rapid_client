# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PropertyContentCheckin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_24_hour': 'str',
        'begin_time': 'str',
        'end_time': 'str',
        'instructions': 'str',
        'special_instructions': 'str',
        'min_age': 'float'
    }

    attribute_map = {
        '_24_hour': '24_hour',
        'begin_time': 'begin_time',
        'end_time': 'end_time',
        'instructions': 'instructions',
        'special_instructions': 'special_instructions',
        'min_age': 'min_age'
    }

    def __init__(self, _24_hour=None, begin_time=None, end_time=None, instructions=None, special_instructions=None, min_age=None):  # noqa: E501
        """PropertyContentCheckin - a model defined in Swagger"""  # noqa: E501

        self.__24_hour = None
        self._begin_time = None
        self._end_time = None
        self._instructions = None
        self._special_instructions = None
        self._min_age = None
        self.discriminator = None

        if _24_hour is not None:
            self._24_hour = _24_hour
        if begin_time is not None:
            self.begin_time = begin_time
        if end_time is not None:
            self.end_time = end_time
        if instructions is not None:
            self.instructions = instructions
        if special_instructions is not None:
            self.special_instructions = special_instructions
        if min_age is not None:
            self.min_age = min_age

    @property
    def _24_hour(self):
        """Gets the _24_hour of this PropertyContentCheckin.  # noqa: E501

        Present if the property has 24-hour check-in.  # noqa: E501

        :return: The _24_hour of this PropertyContentCheckin.  # noqa: E501
        :rtype: str
        """
        return self.__24_hour

    @_24_hour.setter
    def _24_hour(self, _24_hour):
        """Sets the _24_hour of this PropertyContentCheckin.

        Present if the property has 24-hour check-in.  # noqa: E501

        :param _24_hour: The _24_hour of this PropertyContentCheckin.  # noqa: E501
        :type: str
        """

        self.__24_hour = _24_hour

    @property
    def begin_time(self):
        """Gets the begin_time of this PropertyContentCheckin.  # noqa: E501

        The time at which a property begins to allow check-ins.  # noqa: E501

        :return: The begin_time of this PropertyContentCheckin.  # noqa: E501
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this PropertyContentCheckin.

        The time at which a property begins to allow check-ins.  # noqa: E501

        :param begin_time: The begin_time of this PropertyContentCheckin.  # noqa: E501
        :type: str
        """

        self._begin_time = begin_time

    @property
    def end_time(self):
        """Gets the end_time of this PropertyContentCheckin.  # noqa: E501

        The time at which a property stops allowing check-ins.  # noqa: E501

        :return: The end_time of this PropertyContentCheckin.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PropertyContentCheckin.

        The time at which a property stops allowing check-ins.  # noqa: E501

        :param end_time: The end_time of this PropertyContentCheckin.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def instructions(self):
        """Gets the instructions of this PropertyContentCheckin.  # noqa: E501

        The property's check-in policy.  # noqa: E501

        :return: The instructions of this PropertyContentCheckin.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this PropertyContentCheckin.

        The property's check-in policy.  # noqa: E501

        :param instructions: The instructions of this PropertyContentCheckin.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def special_instructions(self):
        """Gets the special_instructions of this PropertyContentCheckin.  # noqa: E501

        Any special instructions for checking into this property that may be specific to this property.  # noqa: E501

        :return: The special_instructions of this PropertyContentCheckin.  # noqa: E501
        :rtype: str
        """
        return self._special_instructions

    @special_instructions.setter
    def special_instructions(self, special_instructions):
        """Sets the special_instructions of this PropertyContentCheckin.

        Any special instructions for checking into this property that may be specific to this property.  # noqa: E501

        :param special_instructions: The special_instructions of this PropertyContentCheckin.  # noqa: E501
        :type: str
        """

        self._special_instructions = special_instructions

    @property
    def min_age(self):
        """Gets the min_age of this PropertyContentCheckin.  # noqa: E501

        The minimum age for a customer to be able to check-in at a property.  # noqa: E501

        :return: The min_age of this PropertyContentCheckin.  # noqa: E501
        :rtype: float
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this PropertyContentCheckin.

        The minimum age for a customer to be able to check-in at a property.  # noqa: E501

        :param min_age: The min_age of this PropertyContentCheckin.  # noqa: E501
        :type: float
        """

        self._min_age = min_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyContentCheckin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyContentCheckin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
