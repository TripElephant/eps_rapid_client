# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.airport_associated_region import AirportAssociatedRegion  # noqa: F401,E501
from eps_rapid.models.airport_coordinates import AirportCoordinates  # noqa: F401,E501


class Airport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iata_airport_code': 'str',
        'name': 'str',
        'name_full': 'str',
        'descriptor': 'str',
        'country_code': 'str',
        'iata_airport_metro_code': 'str',
        'coordinates': 'AirportCoordinates',
        'property_ids': 'list[str]',
        'associated_region': 'AirportAssociatedRegion'
    }

    attribute_map = {
        'iata_airport_code': 'iata_airport_code',
        'name': 'name',
        'name_full': 'name_full',
        'descriptor': 'descriptor',
        'country_code': 'country_code',
        'iata_airport_metro_code': 'iata_airport_metro_code',
        'coordinates': 'coordinates',
        'property_ids': 'property_ids',
        'associated_region': 'associated_region'
    }

    def __init__(self, iata_airport_code=None, name=None, name_full=None, descriptor=None, country_code=None, iata_airport_metro_code=None, coordinates=None, property_ids=None, associated_region=None):  # noqa: E501
        """Airport - a model defined in Swagger"""  # noqa: E501

        self._iata_airport_code = None
        self._name = None
        self._name_full = None
        self._descriptor = None
        self._country_code = None
        self._iata_airport_metro_code = None
        self._coordinates = None
        self._property_ids = None
        self._associated_region = None
        self.discriminator = None

        if iata_airport_code is not None:
            self.iata_airport_code = iata_airport_code
        if name is not None:
            self.name = name
        if name_full is not None:
            self.name_full = name_full
        if descriptor is not None:
            self.descriptor = descriptor
        if country_code is not None:
            self.country_code = country_code
        if iata_airport_metro_code is not None:
            self.iata_airport_metro_code = iata_airport_metro_code
        if coordinates is not None:
            self.coordinates = coordinates
        if property_ids is not None:
            self.property_ids = property_ids
        if associated_region is not None:
            self.associated_region = associated_region

    @property
    def iata_airport_code(self):
        """Gets the iata_airport_code of this Airport.  # noqa: E501

        3-character IATA airport code.  # noqa: E501

        :return: The iata_airport_code of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._iata_airport_code

    @iata_airport_code.setter
    def iata_airport_code(self, iata_airport_code):
        """Sets the iata_airport_code of this Airport.

        3-character IATA airport code.  # noqa: E501

        :param iata_airport_code: The iata_airport_code of this Airport.  # noqa: E501
        :type: str
        """

        self._iata_airport_code = iata_airport_code

    @property
    def name(self):
        """Gets the name of this Airport.  # noqa: E501

        Airport name.  # noqa: E501

        :return: The name of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Airport.

        Airport name.  # noqa: E501

        :param name: The name of this Airport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_full(self):
        """Gets the name_full of this Airport.  # noqa: E501

        Full airport name.  # noqa: E501

        :return: The name_full of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._name_full

    @name_full.setter
    def name_full(self, name_full):
        """Sets the name_full of this Airport.

        Full airport name.  # noqa: E501

        :param name_full: The name_full of this Airport.  # noqa: E501
        :type: str
        """

        self._name_full = name_full

    @property
    def descriptor(self):
        """Gets the descriptor of this Airport.  # noqa: E501

        Specific information about the region e.g. whether it covers surrounding areas for a city. See our [region descriptors reference](https://developer.expediapartnersolutions.com/reference/geography-reference-lists-2-2/) for current known descriptor values.  # noqa: E501

        :return: The descriptor of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this Airport.

        Specific information about the region e.g. whether it covers surrounding areas for a city. See our [region descriptors reference](https://developer.expediapartnersolutions.com/reference/geography-reference-lists-2-2/) for current known descriptor values.  # noqa: E501

        :param descriptor: The descriptor of this Airport.  # noqa: E501
        :type: str
        """

        self._descriptor = descriptor

    @property
    def country_code(self):
        """Gets the country_code of this Airport.  # noqa: E501

        Airport’s country code (ISO-3166 ALPHA-2).  # noqa: E501

        :return: The country_code of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Airport.

        Airport’s country code (ISO-3166 ALPHA-2).  # noqa: E501

        :param country_code: The country_code of this Airport.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def iata_airport_metro_code(self):
        """Gets the iata_airport_metro_code of this Airport.  # noqa: E501

        3-character IATA airport metropolitan code of the metropolitan airport area.  # noqa: E501

        :return: The iata_airport_metro_code of this Airport.  # noqa: E501
        :rtype: str
        """
        return self._iata_airport_metro_code

    @iata_airport_metro_code.setter
    def iata_airport_metro_code(self, iata_airport_metro_code):
        """Sets the iata_airport_metro_code of this Airport.

        3-character IATA airport metropolitan code of the metropolitan airport area.  # noqa: E501

        :param iata_airport_metro_code: The iata_airport_metro_code of this Airport.  # noqa: E501
        :type: str
        """

        self._iata_airport_metro_code = iata_airport_metro_code

    @property
    def coordinates(self):
        """Gets the coordinates of this Airport.  # noqa: E501


        :return: The coordinates of this Airport.  # noqa: E501
        :rtype: AirportCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Airport.


        :param coordinates: The coordinates of this Airport.  # noqa: E501
        :type: AirportCoordinates
        """

        self._coordinates = coordinates

    @property
    def property_ids(self):
        """Gets the property_ids of this Airport.  # noqa: E501

        An array of property ids within a 20 km radius of the airport.  # noqa: E501

        :return: The property_ids of this Airport.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_ids

    @property_ids.setter
    def property_ids(self, property_ids):
        """Sets the property_ids of this Airport.

        An array of property ids within a 20 km radius of the airport.  # noqa: E501

        :param property_ids: The property_ids of this Airport.  # noqa: E501
        :type: list[str]
        """

        self._property_ids = property_ids

    @property
    def associated_region(self):
        """Gets the associated_region of this Airport.  # noqa: E501


        :return: The associated_region of this Airport.  # noqa: E501
        :rtype: AirportAssociatedRegion
        """
        return self._associated_region

    @associated_region.setter
    def associated_region(self, associated_region):
        """Sets the associated_region of this Airport.


        :param associated_region: The associated_region of this Airport.  # noqa: E501
        :type: AirportAssociatedRegion
        """

        self._associated_region = associated_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Airport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Airport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
