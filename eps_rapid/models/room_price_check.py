# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.link import Link  # noqa: F401,E501
from eps_rapid.models.room_rates import RoomRates  # noqa: F401,E501


class RoomPriceCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'occupancy_pricing': 'RoomRates',
        'links': 'dict(str, Link)'
    }

    attribute_map = {
        'status': 'status',
        'occupancy_pricing': 'occupancy_pricing',
        'links': 'links'
    }

    def __init__(self, status=None, occupancy_pricing=None, links=None):  # noqa: E501
        """RoomPriceCheck - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._occupancy_pricing = None
        self._links = None
        self.discriminator = None

        self.status = status
        self.occupancy_pricing = occupancy_pricing
        self.links = links

    @property
    def status(self):
        """Gets the status of this RoomPriceCheck.  # noqa: E501

        Indicates matched when there is a price match with the shop response.  # noqa: E501

        :return: The status of this RoomPriceCheck.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RoomPriceCheck.

        Indicates matched when there is a price match with the shop response.  # noqa: E501

        :param status: The status of this RoomPriceCheck.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["matched", "price_changed", "sold_out"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def occupancy_pricing(self):
        """Gets the occupancy_pricing of this RoomPriceCheck.  # noqa: E501


        :return: The occupancy_pricing of this RoomPriceCheck.  # noqa: E501
        :rtype: RoomRates
        """
        return self._occupancy_pricing

    @occupancy_pricing.setter
    def occupancy_pricing(self, occupancy_pricing):
        """Sets the occupancy_pricing of this RoomPriceCheck.


        :param occupancy_pricing: The occupancy_pricing of this RoomPriceCheck.  # noqa: E501
        :type: RoomRates
        """
        if occupancy_pricing is None:
            raise ValueError("Invalid value for `occupancy_pricing`, must not be `None`")  # noqa: E501

        self._occupancy_pricing = occupancy_pricing

    @property
    def links(self):
        """Gets the links of this RoomPriceCheck.  # noqa: E501

        A map of links, including links to continue booking this rate or to shop for additional rates.  If this rate is still available for booking then a book link will be present if PSD2 is not a requirement for you or a payment_session link will be present if PSD2 is a requirement for you.   # noqa: E501

        :return: The links of this RoomPriceCheck.  # noqa: E501
        :rtype: dict(str, Link)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RoomPriceCheck.

        A map of links, including links to continue booking this rate or to shop for additional rates.  If this rate is still available for booking then a book link will be present if PSD2 is not a requirement for you or a payment_session link will be present if PSD2 is a requirement for you.   # noqa: E501

        :param links: The links of this RoomPriceCheck.  # noqa: E501
        :type: dict(str, Link)
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomPriceCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomPriceCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
