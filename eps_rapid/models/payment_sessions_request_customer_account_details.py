# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentSessionsRequestCustomerAccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_method': 'str',
        'authentication_timestamp': 'str',
        'create_date': 'str',
        'change_date': 'str',
        'password_change_date': 'str',
        'add_card_attempts': 'float',
        'account_purchases': 'float'
    }

    attribute_map = {
        'authentication_method': 'authentication_method',
        'authentication_timestamp': 'authentication_timestamp',
        'create_date': 'create_date',
        'change_date': 'change_date',
        'password_change_date': 'password_change_date',
        'add_card_attempts': 'add_card_attempts',
        'account_purchases': 'account_purchases'
    }

    def __init__(self, authentication_method=None, authentication_timestamp=None, create_date=None, change_date=None, password_change_date=None, add_card_attempts=None, account_purchases=None):  # noqa: E501
        """PaymentSessionsRequestCustomerAccountDetails - a model defined in Swagger"""  # noqa: E501

        self._authentication_method = None
        self._authentication_timestamp = None
        self._create_date = None
        self._change_date = None
        self._password_change_date = None
        self._add_card_attempts = None
        self._account_purchases = None
        self.discriminator = None

        if authentication_method is not None:
            self.authentication_method = authentication_method
        if authentication_timestamp is not None:
            self.authentication_timestamp = authentication_timestamp
        if create_date is not None:
            self.create_date = create_date
        if change_date is not None:
            self.change_date = change_date
        if password_change_date is not None:
            self.password_change_date = password_change_date
        if add_card_attempts is not None:
            self.add_card_attempts = add_card_attempts
        if account_purchases is not None:
            self.account_purchases = account_purchases

    @property
    def authentication_method(self):
        """Gets the authentication_method of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Mechanism used by the cardholder to authenticate to the merchant.  # noqa: E501

        :return: The authentication_method of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this PaymentSessionsRequestCustomerAccountDetails.

        Mechanism used by the cardholder to authenticate to the merchant.  # noqa: E501

        :param authentication_method: The authentication_method of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["guest", "own_credentials", "federated_id", "issuer_credentials", "third_party_authentication", "fido_authenticaton"]  # noqa: E501
        if authentication_method not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_method` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication_method, allowed_values)
            )

        self._authentication_method = authentication_method

    @property
    def authentication_timestamp(self):
        """Gets the authentication_timestamp of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Date and time in UTC of the cardholder authentication, in extended ISO 8601 format.  # noqa: E501

        :return: The authentication_timestamp of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._authentication_timestamp

    @authentication_timestamp.setter
    def authentication_timestamp(self, authentication_timestamp):
        """Sets the authentication_timestamp of this PaymentSessionsRequestCustomerAccountDetails.

        Date and time in UTC of the cardholder authentication, in extended ISO 8601 format.  # noqa: E501

        :param authentication_timestamp: The authentication_timestamp of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: str
        """

        self._authentication_timestamp = authentication_timestamp

    @property
    def create_date(self):
        """Gets the create_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Date the cardholder opened the account with the merchant, in ISO 8601 format (YYYY-MM-DD).  # noqa: E501

        :return: The create_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this PaymentSessionsRequestCustomerAccountDetails.

        Date the cardholder opened the account with the merchant, in ISO 8601 format (YYYY-MM-DD).  # noqa: E501

        :param create_date: The create_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def change_date(self):
        """Gets the change_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Date the cardholder’s account with the merchant was last changed, including Billing or Shipping address, new payment account, or new user(s) added, in ISO 8601 format (YYYY-MM-DD).  # noqa: E501

        :return: The change_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this PaymentSessionsRequestCustomerAccountDetails.

        Date the cardholder’s account with the merchant was last changed, including Billing or Shipping address, new payment account, or new user(s) added, in ISO 8601 format (YYYY-MM-DD).  # noqa: E501

        :param change_date: The change_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: str
        """

        self._change_date = change_date

    @property
    def password_change_date(self):
        """Gets the password_change_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Date the cardholder’s account with the merchant had a password change or account reset, in ISO 8601 format (YYYY-MM-DD).  # noqa: E501

        :return: The password_change_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._password_change_date

    @password_change_date.setter
    def password_change_date(self, password_change_date):
        """Sets the password_change_date of this PaymentSessionsRequestCustomerAccountDetails.

        Date the cardholder’s account with the merchant had a password change or account reset, in ISO 8601 format (YYYY-MM-DD).  # noqa: E501

        :param password_change_date: The password_change_date of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: str
        """

        self._password_change_date = password_change_date

    @property
    def add_card_attempts(self):
        """Gets the add_card_attempts of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Number of add card attempts in the last 24 hours.  # noqa: E501

        :return: The add_card_attempts of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: float
        """
        return self._add_card_attempts

    @add_card_attempts.setter
    def add_card_attempts(self, add_card_attempts):
        """Sets the add_card_attempts of this PaymentSessionsRequestCustomerAccountDetails.

        Number of add card attempts in the last 24 hours.  # noqa: E501

        :param add_card_attempts: The add_card_attempts of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: float
        """

        self._add_card_attempts = add_card_attempts

    @property
    def account_purchases(self):
        """Gets the account_purchases of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501

        Number of purchases with this cardholder's account during the previous six months.  # noqa: E501

        :return: The account_purchases of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :rtype: float
        """
        return self._account_purchases

    @account_purchases.setter
    def account_purchases(self, account_purchases):
        """Sets the account_purchases of this PaymentSessionsRequestCustomerAccountDetails.

        Number of purchases with this cardholder's account during the previous six months.  # noqa: E501

        :param account_purchases: The account_purchases of this PaymentSessionsRequestCustomerAccountDetails.  # noqa: E501
        :type: float
        """

        self._account_purchases = account_purchases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSessionsRequestCustomerAccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSessionsRequestCustomerAccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
