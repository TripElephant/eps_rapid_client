# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.retrieve_confirmation_id import RetrieveConfirmationId  # noqa: F401,E501
from eps_rapid.models.retrieve_links1 import RetrieveLinks1  # noqa: F401,E501
from eps_rapid.models.retrieve_rate import RetrieveRate  # noqa: F401,E501


class RetrieveRooms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'confirmation_id': 'RetrieveConfirmationId',
        'bed_group_id': 'str',
        'checkin': 'str',
        'checkout': 'str',
        'number_of_adults': 'float',
        'child_ages': 'list[float]',
        'given_name': 'str',
        'family_name': 'str',
        'status': 'str',
        'special_request': 'str',
        'smoking': 'bool',
        'rate': 'RetrieveRate',
        'links': 'RetrieveLinks1'
    }

    attribute_map = {
        'id': 'id',
        'confirmation_id': 'confirmation_id',
        'bed_group_id': 'bed_group_id',
        'checkin': 'checkin',
        'checkout': 'checkout',
        'number_of_adults': 'number_of_adults',
        'child_ages': 'child_ages',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'status': 'status',
        'special_request': 'special_request',
        'smoking': 'smoking',
        'rate': 'rate',
        'links': 'links'
    }

    def __init__(self, id=None, confirmation_id=None, bed_group_id=None, checkin=None, checkout=None, number_of_adults=None, child_ages=None, given_name=None, family_name=None, status=None, special_request=None, smoking=None, rate=None, links=None):  # noqa: E501
        """RetrieveRooms - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._confirmation_id = None
        self._bed_group_id = None
        self._checkin = None
        self._checkout = None
        self._number_of_adults = None
        self._child_ages = None
        self._given_name = None
        self._family_name = None
        self._status = None
        self._special_request = None
        self._smoking = None
        self._rate = None
        self._links = None
        self.discriminator = None

        self.id = id
        if confirmation_id is not None:
            self.confirmation_id = confirmation_id
        if bed_group_id is not None:
            self.bed_group_id = bed_group_id
        self.checkin = checkin
        self.checkout = checkout
        self.number_of_adults = number_of_adults
        if child_ages is not None:
            self.child_ages = child_ages
        self.given_name = given_name
        self.family_name = family_name
        self.status = status
        if special_request is not None:
            self.special_request = special_request
        self.smoking = smoking
        if rate is not None:
            self.rate = rate
        self.links = links

    @property
    def id(self):
        """Gets the id of this RetrieveRooms.  # noqa: E501

        The room id.  # noqa: E501

        :return: The id of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RetrieveRooms.

        The room id.  # noqa: E501

        :param id: The id of this RetrieveRooms.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def confirmation_id(self):
        """Gets the confirmation_id of this RetrieveRooms.  # noqa: E501


        :return: The confirmation_id of this RetrieveRooms.  # noqa: E501
        :rtype: RetrieveConfirmationId
        """
        return self._confirmation_id

    @confirmation_id.setter
    def confirmation_id(self, confirmation_id):
        """Sets the confirmation_id of this RetrieveRooms.


        :param confirmation_id: The confirmation_id of this RetrieveRooms.  # noqa: E501
        :type: RetrieveConfirmationId
        """

        self._confirmation_id = confirmation_id

    @property
    def bed_group_id(self):
        """Gets the bed_group_id of this RetrieveRooms.  # noqa: E501

        Unique identifier for a bed type.  # noqa: E501

        :return: The bed_group_id of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._bed_group_id

    @bed_group_id.setter
    def bed_group_id(self, bed_group_id):
        """Sets the bed_group_id of this RetrieveRooms.

        Unique identifier for a bed type.  # noqa: E501

        :param bed_group_id: The bed_group_id of this RetrieveRooms.  # noqa: E501
        :type: str
        """

        self._bed_group_id = bed_group_id

    @property
    def checkin(self):
        """Gets the checkin of this RetrieveRooms.  # noqa: E501

        The check-in date of the itinerary.  # noqa: E501

        :return: The checkin of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._checkin

    @checkin.setter
    def checkin(self, checkin):
        """Sets the checkin of this RetrieveRooms.

        The check-in date of the itinerary.  # noqa: E501

        :param checkin: The checkin of this RetrieveRooms.  # noqa: E501
        :type: str
        """
        if checkin is None:
            raise ValueError("Invalid value for `checkin`, must not be `None`")  # noqa: E501

        self._checkin = checkin

    @property
    def checkout(self):
        """Gets the checkout of this RetrieveRooms.  # noqa: E501

        The check-out date of the itinerary.  # noqa: E501

        :return: The checkout of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """Sets the checkout of this RetrieveRooms.

        The check-out date of the itinerary.  # noqa: E501

        :param checkout: The checkout of this RetrieveRooms.  # noqa: E501
        :type: str
        """
        if checkout is None:
            raise ValueError("Invalid value for `checkout`, must not be `None`")  # noqa: E501

        self._checkout = checkout

    @property
    def number_of_adults(self):
        """Gets the number_of_adults of this RetrieveRooms.  # noqa: E501

        The number of adults staying in the room.  # noqa: E501

        :return: The number_of_adults of this RetrieveRooms.  # noqa: E501
        :rtype: float
        """
        return self._number_of_adults

    @number_of_adults.setter
    def number_of_adults(self, number_of_adults):
        """Sets the number_of_adults of this RetrieveRooms.

        The number of adults staying in the room.  # noqa: E501

        :param number_of_adults: The number_of_adults of this RetrieveRooms.  # noqa: E501
        :type: float
        """
        if number_of_adults is None:
            raise ValueError("Invalid value for `number_of_adults`, must not be `None`")  # noqa: E501

        self._number_of_adults = number_of_adults

    @property
    def child_ages(self):
        """Gets the child_ages of this RetrieveRooms.  # noqa: E501

        The ages of children for the room.  # noqa: E501

        :return: The child_ages of this RetrieveRooms.  # noqa: E501
        :rtype: list[float]
        """
        return self._child_ages

    @child_ages.setter
    def child_ages(self, child_ages):
        """Sets the child_ages of this RetrieveRooms.

        The ages of children for the room.  # noqa: E501

        :param child_ages: The child_ages of this RetrieveRooms.  # noqa: E501
        :type: list[float]
        """

        self._child_ages = child_ages

    @property
    def given_name(self):
        """Gets the given_name of this RetrieveRooms.  # noqa: E501

        The first name of the main guest staying in the room.  # noqa: E501

        :return: The given_name of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this RetrieveRooms.

        The first name of the main guest staying in the room.  # noqa: E501

        :param given_name: The given_name of this RetrieveRooms.  # noqa: E501
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  # noqa: E501

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this RetrieveRooms.  # noqa: E501

        The last name of the main guest staying in the room.  # noqa: E501

        :return: The family_name of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this RetrieveRooms.

        The last name of the main guest staying in the room.  # noqa: E501

        :param family_name: The family_name of this RetrieveRooms.  # noqa: E501
        :type: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")  # noqa: E501

        self._family_name = family_name

    @property
    def status(self):
        """Gets the status of this RetrieveRooms.  # noqa: E501

        The booking status of the room.  # noqa: E501

        :return: The status of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RetrieveRooms.

        The booking status of the room.  # noqa: E501

        :param status: The status of this RetrieveRooms.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "booked", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def special_request(self):
        """Gets the special_request of this RetrieveRooms.  # noqa: E501

        Any special request info associated with the room.  # noqa: E501

        :return: The special_request of this RetrieveRooms.  # noqa: E501
        :rtype: str
        """
        return self._special_request

    @special_request.setter
    def special_request(self, special_request):
        """Sets the special_request of this RetrieveRooms.

        Any special request info associated with the room.  # noqa: E501

        :param special_request: The special_request of this RetrieveRooms.  # noqa: E501
        :type: str
        """

        self._special_request = special_request

    @property
    def smoking(self):
        """Gets the smoking of this RetrieveRooms.  # noqa: E501

        Indicates if the room is smoking or non-smoking.  # noqa: E501

        :return: The smoking of this RetrieveRooms.  # noqa: E501
        :rtype: bool
        """
        return self._smoking

    @smoking.setter
    def smoking(self, smoking):
        """Sets the smoking of this RetrieveRooms.

        Indicates if the room is smoking or non-smoking.  # noqa: E501

        :param smoking: The smoking of this RetrieveRooms.  # noqa: E501
        :type: bool
        """
        if smoking is None:
            raise ValueError("Invalid value for `smoking`, must not be `None`")  # noqa: E501

        self._smoking = smoking

    @property
    def rate(self):
        """Gets the rate of this RetrieveRooms.  # noqa: E501


        :return: The rate of this RetrieveRooms.  # noqa: E501
        :rtype: RetrieveRate
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this RetrieveRooms.


        :param rate: The rate of this RetrieveRooms.  # noqa: E501
        :type: RetrieveRate
        """

        self._rate = rate

    @property
    def links(self):
        """Gets the links of this RetrieveRooms.  # noqa: E501


        :return: The links of this RetrieveRooms.  # noqa: E501
        :rtype: RetrieveLinks1
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RetrieveRooms.


        :param links: The links of this RetrieveRooms.  # noqa: E501
        :type: RetrieveLinks1
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveRooms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveRooms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
