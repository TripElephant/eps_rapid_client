# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentOptionCreditCardCardOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'card_type': 'str',
        'processing_country': 'str'
    }

    attribute_map = {
        'name': 'name',
        'card_type': 'card_type',
        'processing_country': 'processing_country'
    }

    def __init__(self, name=None, card_type=None, processing_country=None):  # noqa: E501
        """PaymentOptionCreditCardCardOptions - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._card_type = None
        self._processing_country = None
        self.discriminator = None

        self.name = name
        self.card_type = card_type
        if processing_country is not None:
            self.processing_country = processing_country

    @property
    def name(self):
        """Gets the name of this PaymentOptionCreditCardCardOptions.  # noqa: E501

        Brand name for the accepted credit or debit card. Use this value to determine which cards to display on your checkout page.  # noqa: E501

        :return: The name of this PaymentOptionCreditCardCardOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentOptionCreditCardCardOptions.

        Brand name for the accepted credit or debit card. Use this value to determine which cards to display on your checkout page.  # noqa: E501

        :param name: The name of this PaymentOptionCreditCardCardOptions.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def card_type(self):
        """Gets the card_type of this PaymentOptionCreditCardCardOptions.  # noqa: E501

        Two-letter code used in credit or debit card bookings to indicate card type. Use this value in your booking request to ensure that the card is processed correctly, but do not use it to display the supported card brands on your checkout page. It's expected behavior for this value to vary for a given card's brand name.  # noqa: E501

        :return: The card_type of this PaymentOptionCreditCardCardOptions.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this PaymentOptionCreditCardCardOptions.

        Two-letter code used in credit or debit card bookings to indicate card type. Use this value in your booking request to ensure that the card is processed correctly, but do not use it to display the supported card brands on your checkout page. It's expected behavior for this value to vary for a given card's brand name.  # noqa: E501

        :param card_type: The card_type of this PaymentOptionCreditCardCardOptions.  # noqa: E501
        :type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501

        self._card_type = card_type

    @property
    def processing_country(self):
        """Gets the processing_country of this PaymentOptionCreditCardCardOptions.  # noqa: E501

        The country in which the payment will be processed.  # noqa: E501

        :return: The processing_country of this PaymentOptionCreditCardCardOptions.  # noqa: E501
        :rtype: str
        """
        return self._processing_country

    @processing_country.setter
    def processing_country(self, processing_country):
        """Sets the processing_country of this PaymentOptionCreditCardCardOptions.

        The country in which the payment will be processed.  # noqa: E501

        :param processing_country: The processing_country of this PaymentOptionCreditCardCardOptions.  # noqa: E501
        :type: str
        """

        self._processing_country = processing_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOptionCreditCardCardOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOptionCreditCardCardOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
