# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.room_rate_fees import RoomRateFees  # noqa: F401,E501
from eps_rapid.models.room_rate_stay import RoomRateStay  # noqa: F401,E501
from eps_rapid.models.room_rate_totals import RoomRateTotals  # noqa: F401,E501


class RoomRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nightly': 'list[list[object]]',
        'stay': 'list[RoomRateStay]',
        'totals': 'RoomRateTotals',
        'fees': 'RoomRateFees'
    }

    attribute_map = {
        'nightly': 'nightly',
        'stay': 'stay',
        'totals': 'totals',
        'fees': 'fees'
    }

    def __init__(self, nightly=None, stay=None, totals=None, fees=None):  # noqa: E501
        """RoomRate - a model defined in Swagger"""  # noqa: E501

        self._nightly = None
        self._stay = None
        self._totals = None
        self._fees = None
        self.discriminator = None

        self.nightly = nightly
        self.stay = stay
        self.totals = totals
        if fees is not None:
            self.fees = fees

    @property
    def nightly(self):
        """Gets the nightly of this RoomRate.  # noqa: E501

        Array of arrays of amount objects. Each sub-array of amount objects represents a single night's charges  # noqa: E501

        :return: The nightly of this RoomRate.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._nightly

    @nightly.setter
    def nightly(self, nightly):
        """Sets the nightly of this RoomRate.

        Array of arrays of amount objects. Each sub-array of amount objects represents a single night's charges  # noqa: E501

        :param nightly: The nightly of this RoomRate.  # noqa: E501
        :type: list[list[object]]
        """
        if nightly is None:
            raise ValueError("Invalid value for `nightly`, must not be `None`")  # noqa: E501

        self._nightly = nightly

    @property
    def stay(self):
        """Gets the stay of this RoomRate.  # noqa: E501

        Array of amount objects. Details any charges that apply to the entire stay (not divided per-night). Any per-room adjustments are applied to the `base_rate` amount within this object.  # noqa: E501

        :return: The stay of this RoomRate.  # noqa: E501
        :rtype: list[RoomRateStay]
        """
        return self._stay

    @stay.setter
    def stay(self, stay):
        """Sets the stay of this RoomRate.

        Array of amount objects. Details any charges that apply to the entire stay (not divided per-night). Any per-room adjustments are applied to the `base_rate` amount within this object.  # noqa: E501

        :param stay: The stay of this RoomRate.  # noqa: E501
        :type: list[RoomRateStay]
        """
        if stay is None:
            raise ValueError("Invalid value for `stay`, must not be `None`")  # noqa: E501

        self._stay = stay

    @property
    def totals(self):
        """Gets the totals of this RoomRate.  # noqa: E501


        :return: The totals of this RoomRate.  # noqa: E501
        :rtype: RoomRateTotals
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this RoomRate.


        :param totals: The totals of this RoomRate.  # noqa: E501
        :type: RoomRateTotals
        """
        if totals is None:
            raise ValueError("Invalid value for `totals`, must not be `None`")  # noqa: E501

        self._totals = totals

    @property
    def fees(self):
        """Gets the fees of this RoomRate.  # noqa: E501


        :return: The fees of this RoomRate.  # noqa: E501
        :rtype: RoomRateFees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this RoomRate.


        :param fees: The fees of this RoomRate.  # noqa: E501
        :type: RoomRateFees
        """

        self._fees = fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
