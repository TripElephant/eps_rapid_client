# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DepositPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nights': 'str',
        'remainder': 'bool',
        'amount': 'str',
        'percent': 'str',
        'due': 'str'
    }

    attribute_map = {
        'nights': 'nights',
        'remainder': 'remainder',
        'amount': 'amount',
        'percent': 'percent',
        'due': 'due'
    }

    def __init__(self, nights=None, remainder=None, amount=None, percent=None, due=None):  # noqa: E501
        """DepositPolicy - a model defined in Swagger"""  # noqa: E501

        self._nights = None
        self._remainder = None
        self._amount = None
        self._percent = None
        self._due = None
        self.discriminator = None

        if nights is not None:
            self.nights = nights
        if remainder is not None:
            self.remainder = remainder
        if amount is not None:
            self.amount = amount
        if percent is not None:
            self.percent = percent
        self.due = due

    @property
    def nights(self):
        """Gets the nights of this DepositPolicy.  # noqa: E501

        The number of nights that must be paid for as a deposit.  # noqa: E501

        :return: The nights of this DepositPolicy.  # noqa: E501
        :rtype: str
        """
        return self._nights

    @nights.setter
    def nights(self, nights):
        """Sets the nights of this DepositPolicy.

        The number of nights that must be paid for as a deposit.  # noqa: E501

        :param nights: The nights of this DepositPolicy.  # noqa: E501
        :type: str
        """

        self._nights = nights

    @property
    def remainder(self):
        """Gets the remainder of this DepositPolicy.  # noqa: E501

        The full remaining balance must be paid as a deposit.  # noqa: E501

        :return: The remainder of this DepositPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._remainder

    @remainder.setter
    def remainder(self, remainder):
        """Sets the remainder of this DepositPolicy.

        The full remaining balance must be paid as a deposit.  # noqa: E501

        :param remainder: The remainder of this DepositPolicy.  # noqa: E501
        :type: bool
        """

        self._remainder = remainder

    @property
    def amount(self):
        """Gets the amount of this DepositPolicy.  # noqa: E501

        The specific dollar amount that must be paid as a deposit.  # noqa: E501

        :return: The amount of this DepositPolicy.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DepositPolicy.

        The specific dollar amount that must be paid as a deposit.  # noqa: E501

        :param amount: The amount of this DepositPolicy.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def percent(self):
        """Gets the percent of this DepositPolicy.  # noqa: E501

        The percent of the total that must be paid as a deposit. Twenty percent would be sent back as 20%.  # noqa: E501

        :return: The percent of this DepositPolicy.  # noqa: E501
        :rtype: str
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this DepositPolicy.

        The percent of the total that must be paid as a deposit. Twenty percent would be sent back as 20%.  # noqa: E501

        :param percent: The percent of this DepositPolicy.  # noqa: E501
        :type: str
        """

        self._percent = percent

    @property
    def due(self):
        """Gets the due of this DepositPolicy.  # noqa: E501

        Due date, in ISO 8601 format  # noqa: E501

        :return: The due of this DepositPolicy.  # noqa: E501
        :rtype: str
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this DepositPolicy.

        Due date, in ISO 8601 format  # noqa: E501

        :param due: The due of this DepositPolicy.  # noqa: E501
        :type: str
        """
        if due is None:
            raise ValueError("Invalid value for `due`, must not be `None`")  # noqa: E501

        self._due = due

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DepositPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepositPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
