# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.link import Link  # noqa: F401,E501


class PaymentSessions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_session_id': 'str',
        'encoded_init_config': 'str',
        'links': 'dict(str, Link)'
    }

    attribute_map = {
        'payment_session_id': 'payment_session_id',
        'encoded_init_config': 'encoded_init_config',
        'links': 'links'
    }

    def __init__(self, payment_session_id=None, encoded_init_config=None, links=None):  # noqa: E501
        """PaymentSessions - a model defined in Swagger"""  # noqa: E501

        self._payment_session_id = None
        self._encoded_init_config = None
        self._links = None
        self.discriminator = None

        self.payment_session_id = payment_session_id
        self.encoded_init_config = encoded_init_config
        self.links = links

    @property
    def payment_session_id(self):
        """Gets the payment_session_id of this PaymentSessions.  # noqa: E501

        The registered payment session ID.  # noqa: E501

        :return: The payment_session_id of this PaymentSessions.  # noqa: E501
        :rtype: str
        """
        return self._payment_session_id

    @payment_session_id.setter
    def payment_session_id(self, payment_session_id):
        """Sets the payment_session_id of this PaymentSessions.

        The registered payment session ID.  # noqa: E501

        :param payment_session_id: The payment_session_id of this PaymentSessions.  # noqa: E501
        :type: str
        """
        if payment_session_id is None:
            raise ValueError("Invalid value for `payment_session_id`, must not be `None`")  # noqa: E501

        self._payment_session_id = payment_session_id

    @property
    def encoded_init_config(self):
        """Gets the encoded_init_config of this PaymentSessions.  # noqa: E501

        A base64 encoded object which contains configuration needed to perform device fingerprinting. It is used in conjunction with the provided Javascript library for PSD2.  # noqa: E501

        :return: The encoded_init_config of this PaymentSessions.  # noqa: E501
        :rtype: str
        """
        return self._encoded_init_config

    @encoded_init_config.setter
    def encoded_init_config(self, encoded_init_config):
        """Sets the encoded_init_config of this PaymentSessions.

        A base64 encoded object which contains configuration needed to perform device fingerprinting. It is used in conjunction with the provided Javascript library for PSD2.  # noqa: E501

        :param encoded_init_config: The encoded_init_config of this PaymentSessions.  # noqa: E501
        :type: str
        """
        if encoded_init_config is None:
            raise ValueError("Invalid value for `encoded_init_config`, must not be `None`")  # noqa: E501

        self._encoded_init_config = encoded_init_config

    @property
    def links(self):
        """Gets the links of this PaymentSessions.  # noqa: E501

        A map of links, including links to create a booking.  # noqa: E501

        :return: The links of this PaymentSessions.  # noqa: E501
        :rtype: dict(str, Link)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentSessions.

        A map of links, including links to create a booking.  # noqa: E501

        :param links: The links of this PaymentSessions.  # noqa: E501
        :type: dict(str, Link)
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSessions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSessions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
