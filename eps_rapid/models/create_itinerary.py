# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.create_itinerary_links import CreateItineraryLinks  # noqa: F401,E501


class CreateItinerary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'itinerary_id': 'str',
        'links': 'CreateItineraryLinks',
        'encoded_challenge_config': 'str'
    }

    attribute_map = {
        'itinerary_id': 'itinerary_id',
        'links': 'links',
        'encoded_challenge_config': 'encoded_challenge_config'
    }

    def __init__(self, itinerary_id=None, links=None, encoded_challenge_config=None):  # noqa: E501
        """CreateItinerary - a model defined in Swagger"""  # noqa: E501

        self._itinerary_id = None
        self._links = None
        self._encoded_challenge_config = None
        self.discriminator = None

        self.itinerary_id = itinerary_id
        self.links = links
        if encoded_challenge_config is not None:
            self.encoded_challenge_config = encoded_challenge_config

    @property
    def itinerary_id(self):
        """Gets the itinerary_id of this CreateItinerary.  # noqa: E501

        The itinerary id.  # noqa: E501

        :return: The itinerary_id of this CreateItinerary.  # noqa: E501
        :rtype: str
        """
        return self._itinerary_id

    @itinerary_id.setter
    def itinerary_id(self, itinerary_id):
        """Sets the itinerary_id of this CreateItinerary.

        The itinerary id.  # noqa: E501

        :param itinerary_id: The itinerary_id of this CreateItinerary.  # noqa: E501
        :type: str
        """
        if itinerary_id is None:
            raise ValueError("Invalid value for `itinerary_id`, must not be `None`")  # noqa: E501

        self._itinerary_id = itinerary_id

    @property
    def links(self):
        """Gets the links of this CreateItinerary.  # noqa: E501


        :return: The links of this CreateItinerary.  # noqa: E501
        :rtype: CreateItineraryLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CreateItinerary.


        :param links: The links of this CreateItinerary.  # noqa: E501
        :type: CreateItineraryLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def encoded_challenge_config(self):
        """Gets the encoded_challenge_config of this CreateItinerary.  # noqa: E501

        The challenge config that is required to perform payment challenge. This field will be available when payment challenge is needed.   # noqa: E501

        :return: The encoded_challenge_config of this CreateItinerary.  # noqa: E501
        :rtype: str
        """
        return self._encoded_challenge_config

    @encoded_challenge_config.setter
    def encoded_challenge_config(self, encoded_challenge_config):
        """Sets the encoded_challenge_config of this CreateItinerary.

        The challenge config that is required to perform payment challenge. This field will be available when payment challenge is needed.   # noqa: E501

        :param encoded_challenge_config: The encoded_challenge_config of this CreateItinerary.  # noqa: E501
        :type: str
        """

        self._encoded_challenge_config = encoded_challenge_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateItinerary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateItinerary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
