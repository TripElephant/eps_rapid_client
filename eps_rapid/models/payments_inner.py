# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.billing_contact import BillingContact  # noqa: F401,E501


class PaymentsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'card_type': 'str',
        'number': 'str',
        'security_code': 'str',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'billing_contact': 'BillingContact'
    }

    attribute_map = {
        'type': 'type',
        'card_type': 'card_type',
        'number': 'number',
        'security_code': 'security_code',
        'expiration_month': 'expiration_month',
        'expiration_year': 'expiration_year',
        'billing_contact': 'billing_contact'
    }

    def __init__(self, type=None, card_type=None, number=None, security_code=None, expiration_month=None, expiration_year=None, billing_contact=None):  # noqa: E501
        """PaymentsInner - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._card_type = None
        self._number = None
        self._security_code = None
        self._expiration_month = None
        self._expiration_year = None
        self._billing_contact = None
        self.discriminator = None

        self.type = type
        if card_type is not None:
            self.card_type = card_type
        if number is not None:
            self.number = number
        if security_code is not None:
            self.security_code = security_code
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        self.billing_contact = billing_contact

    @property
    def type(self):
        """Gets the type of this PaymentsInner.  # noqa: E501

        Identifier for the type of payment. If affiliate_collect, cardholder information is not required as EPS will not be processing the payment.  # noqa: E501

        :return: The type of this PaymentsInner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentsInner.

        Identifier for the type of payment. If affiliate_collect, cardholder information is not required as EPS will not be processing the payment.  # noqa: E501

        :param type: The type of this PaymentsInner.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["corporate_card", "customer_card", "virtual_card", "affiliate_collect"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def card_type(self):
        """Gets the card_type of this PaymentsInner.  # noqa: E501

        The type of credit card that is being used. Obtain possible values from the Payment Options call. Required for credit card transactions.  # noqa: E501

        :return: The card_type of this PaymentsInner.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this PaymentsInner.

        The type of credit card that is being used. Obtain possible values from the Payment Options call. Required for credit card transactions.  # noqa: E501

        :param card_type: The card_type of this PaymentsInner.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def number(self):
        """Gets the number of this PaymentsInner.  # noqa: E501

        Card number. Required for credit card transactions.  # noqa: E501

        :return: The number of this PaymentsInner.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PaymentsInner.

        Card number. Required for credit card transactions.  # noqa: E501

        :param number: The number of this PaymentsInner.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def security_code(self):
        """Gets the security_code of this PaymentsInner.  # noqa: E501

        CVV/CSV code from the back of the customer's card. Required for credit card transactions.  # noqa: E501

        :return: The security_code of this PaymentsInner.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this PaymentsInner.

        CVV/CSV code from the back of the customer's card. Required for credit card transactions.  # noqa: E501

        :param security_code: The security_code of this PaymentsInner.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def expiration_month(self):
        """Gets the expiration_month of this PaymentsInner.  # noqa: E501

        Two-digit month the credit card will expire. Required for credit card transactions.  # noqa: E501

        :return: The expiration_month of this PaymentsInner.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this PaymentsInner.

        Two-digit month the credit card will expire. Required for credit card transactions.  # noqa: E501

        :param expiration_month: The expiration_month of this PaymentsInner.  # noqa: E501
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this PaymentsInner.  # noqa: E501

        Year the credit card will expire. Required for credit card transactions.  # noqa: E501

        :return: The expiration_year of this PaymentsInner.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this PaymentsInner.

        Year the credit card will expire. Required for credit card transactions.  # noqa: E501

        :param expiration_year: The expiration_year of this PaymentsInner.  # noqa: E501
        :type: str
        """

        self._expiration_year = expiration_year

    @property
    def billing_contact(self):
        """Gets the billing_contact of this PaymentsInner.  # noqa: E501


        :return: The billing_contact of this PaymentsInner.  # noqa: E501
        :rtype: BillingContact
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """Sets the billing_contact of this PaymentsInner.


        :param billing_contact: The billing_contact of this PaymentsInner.  # noqa: E501
        :type: BillingContact
        """
        if billing_contact is None:
            raise ValueError("Invalid value for `billing_contact`, must not be `None`")  # noqa: E501

        self._billing_contact = billing_contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
