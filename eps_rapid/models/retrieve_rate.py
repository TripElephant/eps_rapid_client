# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.retrieve_rate_cancel_penalties import RetrieveRateCancelPenalties  # noqa: F401,E501
from eps_rapid.models.retrieve_rate_cancel_refund import RetrieveRateCancelRefund  # noqa: F401,E501
from eps_rapid.models.retrieve_rate_deposit_policies import RetrieveRateDepositPolicies  # noqa: F401,E501
from eps_rapid.models.retrieve_rate_fees import RetrieveRateFees  # noqa: F401,E501
from eps_rapid.models.retrieve_rate_promotions import RetrieveRatePromotions  # noqa: F401,E501
from eps_rapid.models.retrieve_rate_stay import RetrieveRateStay  # noqa: F401,E501


class RetrieveRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'merchant_of_record': 'str',
        'refundable': 'bool',
        'cancel_refund': 'RetrieveRateCancelRefund',
        'amenities': 'list[float]',
        'promotions': 'RetrieveRatePromotions',
        'nightly': 'list[list[object]]',
        'stay': 'list[RetrieveRateStay]',
        'cancel_penalties': 'list[RetrieveRateCancelPenalties]',
        'deposit_policies': 'list[RetrieveRateDepositPolicies]',
        'fees': 'list[RetrieveRateFees]'
    }

    attribute_map = {
        'id': 'id',
        'merchant_of_record': 'merchant_of_record',
        'refundable': 'refundable',
        'cancel_refund': 'cancel_refund',
        'amenities': 'amenities',
        'promotions': 'promotions',
        'nightly': 'nightly',
        'stay': 'stay',
        'cancel_penalties': 'cancel_penalties',
        'deposit_policies': 'deposit_policies',
        'fees': 'fees'
    }

    def __init__(self, id=None, merchant_of_record=None, refundable=None, cancel_refund=None, amenities=None, promotions=None, nightly=None, stay=None, cancel_penalties=None, deposit_policies=None, fees=None):  # noqa: E501
        """RetrieveRate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._merchant_of_record = None
        self._refundable = None
        self._cancel_refund = None
        self._amenities = None
        self._promotions = None
        self._nightly = None
        self._stay = None
        self._cancel_penalties = None
        self._deposit_policies = None
        self._fees = None
        self.discriminator = None

        self.id = id
        self.merchant_of_record = merchant_of_record
        self.refundable = refundable
        if cancel_refund is not None:
            self.cancel_refund = cancel_refund
        if amenities is not None:
            self.amenities = amenities
        if promotions is not None:
            self.promotions = promotions
        self.nightly = nightly
        if stay is not None:
            self.stay = stay
        if cancel_penalties is not None:
            self.cancel_penalties = cancel_penalties
        if deposit_policies is not None:
            self.deposit_policies = deposit_policies
        self.fees = fees

    @property
    def id(self):
        """Gets the id of this RetrieveRate.  # noqa: E501

        The id of the rate.  # noqa: E501

        :return: The id of this RetrieveRate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RetrieveRate.

        The id of the rate.  # noqa: E501

        :param id: The id of this RetrieveRate.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def merchant_of_record(self):
        """Gets the merchant_of_record of this RetrieveRate.  # noqa: E501

        The merchant responsible for collecting payment.  # noqa: E501

        :return: The merchant_of_record of this RetrieveRate.  # noqa: E501
        :rtype: str
        """
        return self._merchant_of_record

    @merchant_of_record.setter
    def merchant_of_record(self, merchant_of_record):
        """Sets the merchant_of_record of this RetrieveRate.

        The merchant responsible for collecting payment.  # noqa: E501

        :param merchant_of_record: The merchant_of_record of this RetrieveRate.  # noqa: E501
        :type: str
        """
        if merchant_of_record is None:
            raise ValueError("Invalid value for `merchant_of_record`, must not be `None`")  # noqa: E501
        allowed_values = ["expedia", "property"]  # noqa: E501
        if merchant_of_record not in allowed_values:
            raise ValueError(
                "Invalid value for `merchant_of_record` ({0}), must be one of {1}"  # noqa: E501
                .format(merchant_of_record, allowed_values)
            )

        self._merchant_of_record = merchant_of_record

    @property
    def refundable(self):
        """Gets the refundable of this RetrieveRate.  # noqa: E501

        Indicates whether the itinerary is refundable or not.  # noqa: E501

        :return: The refundable of this RetrieveRate.  # noqa: E501
        :rtype: bool
        """
        return self._refundable

    @refundable.setter
    def refundable(self, refundable):
        """Sets the refundable of this RetrieveRate.

        Indicates whether the itinerary is refundable or not.  # noqa: E501

        :param refundable: The refundable of this RetrieveRate.  # noqa: E501
        :type: bool
        """
        if refundable is None:
            raise ValueError("Invalid value for `refundable`, must not be `None`")  # noqa: E501

        self._refundable = refundable

    @property
    def cancel_refund(self):
        """Gets the cancel_refund of this RetrieveRate.  # noqa: E501


        :return: The cancel_refund of this RetrieveRate.  # noqa: E501
        :rtype: RetrieveRateCancelRefund
        """
        return self._cancel_refund

    @cancel_refund.setter
    def cancel_refund(self, cancel_refund):
        """Sets the cancel_refund of this RetrieveRate.


        :param cancel_refund: The cancel_refund of this RetrieveRate.  # noqa: E501
        :type: RetrieveRateCancelRefund
        """

        self._cancel_refund = cancel_refund

    @property
    def amenities(self):
        """Gets the amenities of this RetrieveRate.  # noqa: E501


        :return: The amenities of this RetrieveRate.  # noqa: E501
        :rtype: list[float]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this RetrieveRate.


        :param amenities: The amenities of this RetrieveRate.  # noqa: E501
        :type: list[float]
        """

        self._amenities = amenities

    @property
    def promotions(self):
        """Gets the promotions of this RetrieveRate.  # noqa: E501


        :return: The promotions of this RetrieveRate.  # noqa: E501
        :rtype: RetrieveRatePromotions
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this RetrieveRate.


        :param promotions: The promotions of this RetrieveRate.  # noqa: E501
        :type: RetrieveRatePromotions
        """

        self._promotions = promotions

    @property
    def nightly(self):
        """Gets the nightly of this RetrieveRate.  # noqa: E501


        :return: The nightly of this RetrieveRate.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._nightly

    @nightly.setter
    def nightly(self, nightly):
        """Sets the nightly of this RetrieveRate.


        :param nightly: The nightly of this RetrieveRate.  # noqa: E501
        :type: list[list[object]]
        """
        if nightly is None:
            raise ValueError("Invalid value for `nightly`, must not be `None`")  # noqa: E501

        self._nightly = nightly

    @property
    def stay(self):
        """Gets the stay of this RetrieveRate.  # noqa: E501


        :return: The stay of this RetrieveRate.  # noqa: E501
        :rtype: list[RetrieveRateStay]
        """
        return self._stay

    @stay.setter
    def stay(self, stay):
        """Sets the stay of this RetrieveRate.


        :param stay: The stay of this RetrieveRate.  # noqa: E501
        :type: list[RetrieveRateStay]
        """

        self._stay = stay

    @property
    def cancel_penalties(self):
        """Gets the cancel_penalties of this RetrieveRate.  # noqa: E501


        :return: The cancel_penalties of this RetrieveRate.  # noqa: E501
        :rtype: list[RetrieveRateCancelPenalties]
        """
        return self._cancel_penalties

    @cancel_penalties.setter
    def cancel_penalties(self, cancel_penalties):
        """Sets the cancel_penalties of this RetrieveRate.


        :param cancel_penalties: The cancel_penalties of this RetrieveRate.  # noqa: E501
        :type: list[RetrieveRateCancelPenalties]
        """

        self._cancel_penalties = cancel_penalties

    @property
    def deposit_policies(self):
        """Gets the deposit_policies of this RetrieveRate.  # noqa: E501


        :return: The deposit_policies of this RetrieveRate.  # noqa: E501
        :rtype: list[RetrieveRateDepositPolicies]
        """
        return self._deposit_policies

    @deposit_policies.setter
    def deposit_policies(self, deposit_policies):
        """Sets the deposit_policies of this RetrieveRate.


        :param deposit_policies: The deposit_policies of this RetrieveRate.  # noqa: E501
        :type: list[RetrieveRateDepositPolicies]
        """

        self._deposit_policies = deposit_policies

    @property
    def fees(self):
        """Gets the fees of this RetrieveRate.  # noqa: E501


        :return: The fees of this RetrieveRate.  # noqa: E501
        :rtype: list[RetrieveRateFees]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this RetrieveRate.


        :param fees: The fees of this RetrieveRate.  # noqa: E501
        :type: list[RetrieveRateFees]
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
