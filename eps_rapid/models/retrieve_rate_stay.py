# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RetrieveRateStay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'type': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'value': 'value',
        'type': 'type',
        'currency': 'currency'
    }

    def __init__(self, value=None, type=None, currency=None):  # noqa: E501
        """RetrieveRateStay - a model defined in Swagger"""  # noqa: E501

        self._value = None
        self._type = None
        self._currency = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if type is not None:
            self.type = type
        if currency is not None:
            self.currency = currency

    @property
    def value(self):
        """Gets the value of this RetrieveRateStay.  # noqa: E501

        The amount of the stay rate.  # noqa: E501

        :return: The value of this RetrieveRateStay.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RetrieveRateStay.

        The amount of the stay rate.  # noqa: E501

        :param value: The value of this RetrieveRateStay.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def type(self):
        """Gets the type of this RetrieveRateStay.  # noqa: E501

        The type of the stay rate.  # noqa: E501

        :return: The type of this RetrieveRateStay.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RetrieveRateStay.

        The type of the stay rate.  # noqa: E501

        :param type: The type of this RetrieveRateStay.  # noqa: E501
        :type: str
        """
        allowed_values = ["base_rate", "tax_and_service_fee", "extra_person_fee", "compensation", "property_fee", "sales_tax", "adjustment", "recovery_charges_and_fees"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this RetrieveRateStay.  # noqa: E501

        The currency of the stay rate.  # noqa: E501

        :return: The currency of this RetrieveRateStay.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RetrieveRateStay.

        The currency of the stay rate.  # noqa: E501

        :param currency: The currency of this RetrieveRateStay.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveRateStay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveRateStay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
