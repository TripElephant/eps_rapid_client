# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AirportCoordinates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'center_longitude': 'float',
        'center_latitude': 'float'
    }

    attribute_map = {
        'center_longitude': 'center_longitude',
        'center_latitude': 'center_latitude'
    }

    def __init__(self, center_longitude=None, center_latitude=None):  # noqa: E501
        """AirportCoordinates - a model defined in Swagger"""  # noqa: E501

        self._center_longitude = None
        self._center_latitude = None
        self.discriminator = None

        if center_longitude is not None:
            self.center_longitude = center_longitude
        if center_latitude is not None:
            self.center_latitude = center_latitude

    @property
    def center_longitude(self):
        """Gets the center_longitude of this AirportCoordinates.  # noqa: E501

        Center longitude.  # noqa: E501

        :return: The center_longitude of this AirportCoordinates.  # noqa: E501
        :rtype: float
        """
        return self._center_longitude

    @center_longitude.setter
    def center_longitude(self, center_longitude):
        """Sets the center_longitude of this AirportCoordinates.

        Center longitude.  # noqa: E501

        :param center_longitude: The center_longitude of this AirportCoordinates.  # noqa: E501
        :type: float
        """

        self._center_longitude = center_longitude

    @property
    def center_latitude(self):
        """Gets the center_latitude of this AirportCoordinates.  # noqa: E501

        Center latitude.  # noqa: E501

        :return: The center_latitude of this AirportCoordinates.  # noqa: E501
        :rtype: float
        """
        return self._center_latitude

    @center_latitude.setter
    def center_latitude(self, center_latitude):
        """Sets the center_latitude of this AirportCoordinates.

        Center latitude.  # noqa: E501

        :param center_latitude: The center_latitude of this AirportCoordinates.  # noqa: E501
        :type: float
        """

        self._center_latitude = center_latitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AirportCoordinates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AirportCoordinates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
