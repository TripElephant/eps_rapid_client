# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.amenity import Amenity  # noqa: F401,E501
from eps_rapid.models.brand import Brand  # noqa: F401,E501
from eps_rapid.models.chain import Chain  # noqa: F401,E501
from eps_rapid.models.property_content_address import PropertyContentAddress  # noqa: F401,E501
from eps_rapid.models.property_content_airports import PropertyContentAirports  # noqa: F401,E501
from eps_rapid.models.property_content_all_inclusive import PropertyContentAllInclusive  # noqa: F401,E501
from eps_rapid.models.property_content_attributes import PropertyContentAttributes  # noqa: F401,E501
from eps_rapid.models.property_content_business_model import PropertyContentBusinessModel  # noqa: F401,E501
from eps_rapid.models.property_content_category import PropertyContentCategory  # noqa: F401,E501
from eps_rapid.models.property_content_checkin import PropertyContentCheckin  # noqa: F401,E501
from eps_rapid.models.property_content_checkout import PropertyContentCheckout  # noqa: F401,E501
from eps_rapid.models.property_content_dates import PropertyContentDates  # noqa: F401,E501
from eps_rapid.models.property_content_descriptions import PropertyContentDescriptions  # noqa: F401,E501
from eps_rapid.models.property_content_fees import PropertyContentFees  # noqa: F401,E501
from eps_rapid.models.property_content_images import PropertyContentImages  # noqa: F401,E501
from eps_rapid.models.property_content_location import PropertyContentLocation  # noqa: F401,E501
from eps_rapid.models.property_content_onsite_payments import PropertyContentOnsitePayments  # noqa: F401,E501
from eps_rapid.models.property_content_policies import PropertyContentPolicies  # noqa: F401,E501
from eps_rapid.models.property_content_ratings import PropertyContentRatings  # noqa: F401,E501
from eps_rapid.models.rate_content import RateContent  # noqa: F401,E501
from eps_rapid.models.room_content import RoomContent  # noqa: F401,E501
from eps_rapid.models.spoken_language import SpokenLanguage  # noqa: F401,E501
from eps_rapid.models.statistic import Statistic  # noqa: F401,E501
from eps_rapid.models.theme import Theme  # noqa: F401,E501


class PropertyContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_id': 'str',
        'name': 'str',
        'address': 'PropertyContentAddress',
        'ratings': 'PropertyContentRatings',
        'location': 'PropertyContentLocation',
        'phone': 'str',
        'fax': 'str',
        'category': 'PropertyContentCategory',
        'business_model': 'PropertyContentBusinessModel',
        'rank': 'float',
        'checkin': 'PropertyContentCheckin',
        'checkout': 'PropertyContentCheckout',
        'fees': 'PropertyContentFees',
        'policies': 'PropertyContentPolicies',
        'attributes': 'PropertyContentAttributes',
        'amenities': 'dict(str, Amenity)',
        'images': 'list[PropertyContentImages]',
        'onsite_payments': 'PropertyContentOnsitePayments',
        'rooms': 'dict(str, RoomContent)',
        'rates': 'dict(str, RateContent)',
        'dates': 'PropertyContentDates',
        'descriptions': 'PropertyContentDescriptions',
        'statistics': 'dict(str, Statistic)',
        'airports': 'PropertyContentAirports',
        'registry_number': 'str',
        'themes': 'dict(str, Theme)',
        'all_inclusive': 'PropertyContentAllInclusive',
        'tax_id': 'str',
        'chain': 'Chain',
        'brand': 'Brand',
        'spoken_languages': 'dict(str, SpokenLanguage)',
        'multi_unit': 'bool'
    }

    attribute_map = {
        'property_id': 'property_id',
        'name': 'name',
        'address': 'address',
        'ratings': 'ratings',
        'location': 'location',
        'phone': 'phone',
        'fax': 'fax',
        'category': 'category',
        'business_model': 'business_model',
        'rank': 'rank',
        'checkin': 'checkin',
        'checkout': 'checkout',
        'fees': 'fees',
        'policies': 'policies',
        'attributes': 'attributes',
        'amenities': 'amenities',
        'images': 'images',
        'onsite_payments': 'onsite_payments',
        'rooms': 'rooms',
        'rates': 'rates',
        'dates': 'dates',
        'descriptions': 'descriptions',
        'statistics': 'statistics',
        'airports': 'airports',
        'registry_number': 'registry_number',
        'themes': 'themes',
        'all_inclusive': 'all_inclusive',
        'tax_id': 'tax_id',
        'chain': 'chain',
        'brand': 'brand',
        'spoken_languages': 'spoken_languages',
        'multi_unit': 'multi_unit'
    }

    def __init__(self, property_id=None, name=None, address=None, ratings=None, location=None, phone=None, fax=None, category=None, business_model=None, rank=None, checkin=None, checkout=None, fees=None, policies=None, attributes=None, amenities=None, images=None, onsite_payments=None, rooms=None, rates=None, dates=None, descriptions=None, statistics=None, airports=None, registry_number=None, themes=None, all_inclusive=None, tax_id=None, chain=None, brand=None, spoken_languages=None, multi_unit=None):  # noqa: E501
        """PropertyContent - a model defined in Swagger"""  # noqa: E501

        self._property_id = None
        self._name = None
        self._address = None
        self._ratings = None
        self._location = None
        self._phone = None
        self._fax = None
        self._category = None
        self._business_model = None
        self._rank = None
        self._checkin = None
        self._checkout = None
        self._fees = None
        self._policies = None
        self._attributes = None
        self._amenities = None
        self._images = None
        self._onsite_payments = None
        self._rooms = None
        self._rates = None
        self._dates = None
        self._descriptions = None
        self._statistics = None
        self._airports = None
        self._registry_number = None
        self._themes = None
        self._all_inclusive = None
        self._tax_id = None
        self._chain = None
        self._brand = None
        self._spoken_languages = None
        self._multi_unit = None
        self.discriminator = None

        if property_id is not None:
            self.property_id = property_id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if ratings is not None:
            self.ratings = ratings
        if location is not None:
            self.location = location
        if phone is not None:
            self.phone = phone
        if fax is not None:
            self.fax = fax
        if category is not None:
            self.category = category
        if business_model is not None:
            self.business_model = business_model
        if rank is not None:
            self.rank = rank
        if checkin is not None:
            self.checkin = checkin
        if checkout is not None:
            self.checkout = checkout
        if fees is not None:
            self.fees = fees
        if policies is not None:
            self.policies = policies
        if attributes is not None:
            self.attributes = attributes
        if amenities is not None:
            self.amenities = amenities
        if images is not None:
            self.images = images
        if onsite_payments is not None:
            self.onsite_payments = onsite_payments
        if rooms is not None:
            self.rooms = rooms
        if rates is not None:
            self.rates = rates
        if dates is not None:
            self.dates = dates
        if descriptions is not None:
            self.descriptions = descriptions
        if statistics is not None:
            self.statistics = statistics
        if airports is not None:
            self.airports = airports
        if registry_number is not None:
            self.registry_number = registry_number
        if themes is not None:
            self.themes = themes
        if all_inclusive is not None:
            self.all_inclusive = all_inclusive
        if tax_id is not None:
            self.tax_id = tax_id
        if chain is not None:
            self.chain = chain
        if brand is not None:
            self.brand = brand
        if spoken_languages is not None:
            self.spoken_languages = spoken_languages
        if multi_unit is not None:
            self.multi_unit = multi_unit

    @property
    def property_id(self):
        """Gets the property_id of this PropertyContent.  # noqa: E501

        Unique Expedia property ID.  # noqa: E501

        :return: The property_id of this PropertyContent.  # noqa: E501
        :rtype: str
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this PropertyContent.

        Unique Expedia property ID.  # noqa: E501

        :param property_id: The property_id of this PropertyContent.  # noqa: E501
        :type: str
        """

        self._property_id = property_id

    @property
    def name(self):
        """Gets the name of this PropertyContent.  # noqa: E501

        Property name.  # noqa: E501

        :return: The name of this PropertyContent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyContent.

        Property name.  # noqa: E501

        :param name: The name of this PropertyContent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this PropertyContent.  # noqa: E501


        :return: The address of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PropertyContent.


        :param address: The address of this PropertyContent.  # noqa: E501
        :type: PropertyContentAddress
        """

        self._address = address

    @property
    def ratings(self):
        """Gets the ratings of this PropertyContent.  # noqa: E501


        :return: The ratings of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentRatings
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this PropertyContent.


        :param ratings: The ratings of this PropertyContent.  # noqa: E501
        :type: PropertyContentRatings
        """

        self._ratings = ratings

    @property
    def location(self):
        """Gets the location of this PropertyContent.  # noqa: E501


        :return: The location of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PropertyContent.


        :param location: The location of this PropertyContent.  # noqa: E501
        :type: PropertyContentLocation
        """

        self._location = location

    @property
    def phone(self):
        """Gets the phone of this PropertyContent.  # noqa: E501

        The property's phone number.  # noqa: E501

        :return: The phone of this PropertyContent.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PropertyContent.

        The property's phone number.  # noqa: E501

        :param phone: The phone of this PropertyContent.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def fax(self):
        """Gets the fax of this PropertyContent.  # noqa: E501

        The property's fax number.  # noqa: E501

        :return: The fax of this PropertyContent.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this PropertyContent.

        The property's fax number.  # noqa: E501

        :param fax: The fax of this PropertyContent.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def category(self):
        """Gets the category of this PropertyContent.  # noqa: E501


        :return: The category of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PropertyContent.


        :param category: The category of this PropertyContent.  # noqa: E501
        :type: PropertyContentCategory
        """

        self._category = category

    @property
    def business_model(self):
        """Gets the business_model of this PropertyContent.  # noqa: E501


        :return: The business_model of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentBusinessModel
        """
        return self._business_model

    @business_model.setter
    def business_model(self, business_model):
        """Sets the business_model of this PropertyContent.


        :param business_model: The business_model of this PropertyContent.  # noqa: E501
        :type: PropertyContentBusinessModel
        """

        self._business_model = business_model

    @property
    def rank(self):
        """Gets the rank of this PropertyContent.  # noqa: E501

        The property’s rank across all properties. This value sorts properties based on EPS transactional data and details about the property, with 1 indicating the best-performing property and others following in ascending numerical order.  # noqa: E501

        :return: The rank of this PropertyContent.  # noqa: E501
        :rtype: float
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this PropertyContent.

        The property’s rank across all properties. This value sorts properties based on EPS transactional data and details about the property, with 1 indicating the best-performing property and others following in ascending numerical order.  # noqa: E501

        :param rank: The rank of this PropertyContent.  # noqa: E501
        :type: float
        """

        self._rank = rank

    @property
    def checkin(self):
        """Gets the checkin of this PropertyContent.  # noqa: E501


        :return: The checkin of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentCheckin
        """
        return self._checkin

    @checkin.setter
    def checkin(self, checkin):
        """Sets the checkin of this PropertyContent.


        :param checkin: The checkin of this PropertyContent.  # noqa: E501
        :type: PropertyContentCheckin
        """

        self._checkin = checkin

    @property
    def checkout(self):
        """Gets the checkout of this PropertyContent.  # noqa: E501


        :return: The checkout of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentCheckout
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """Sets the checkout of this PropertyContent.


        :param checkout: The checkout of this PropertyContent.  # noqa: E501
        :type: PropertyContentCheckout
        """

        self._checkout = checkout

    @property
    def fees(self):
        """Gets the fees of this PropertyContent.  # noqa: E501


        :return: The fees of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentFees
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this PropertyContent.


        :param fees: The fees of this PropertyContent.  # noqa: E501
        :type: PropertyContentFees
        """

        self._fees = fees

    @property
    def policies(self):
        """Gets the policies of this PropertyContent.  # noqa: E501


        :return: The policies of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentPolicies
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this PropertyContent.


        :param policies: The policies of this PropertyContent.  # noqa: E501
        :type: PropertyContentPolicies
        """

        self._policies = policies

    @property
    def attributes(self):
        """Gets the attributes of this PropertyContent.  # noqa: E501


        :return: The attributes of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PropertyContent.


        :param attributes: The attributes of this PropertyContent.  # noqa: E501
        :type: PropertyContentAttributes
        """

        self._attributes = attributes

    @property
    def amenities(self):
        """Gets the amenities of this PropertyContent.  # noqa: E501

        Lists all of the amenities available for all guests at the property. See our [amenities reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known amenity ID and name values.  # noqa: E501

        :return: The amenities of this PropertyContent.  # noqa: E501
        :rtype: dict(str, Amenity)
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this PropertyContent.

        Lists all of the amenities available for all guests at the property. See our [amenities reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known amenity ID and name values.  # noqa: E501

        :param amenities: The amenities of this PropertyContent.  # noqa: E501
        :type: dict(str, Amenity)
        """

        self._amenities = amenities

    @property
    def images(self):
        """Gets the images of this PropertyContent.  # noqa: E501

        Contains all property images available.  # noqa: E501

        :return: The images of this PropertyContent.  # noqa: E501
        :rtype: list[PropertyContentImages]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PropertyContent.

        Contains all property images available.  # noqa: E501

        :param images: The images of this PropertyContent.  # noqa: E501
        :type: list[PropertyContentImages]
        """

        self._images = images

    @property
    def onsite_payments(self):
        """Gets the onsite_payments of this PropertyContent.  # noqa: E501


        :return: The onsite_payments of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentOnsitePayments
        """
        return self._onsite_payments

    @onsite_payments.setter
    def onsite_payments(self, onsite_payments):
        """Sets the onsite_payments of this PropertyContent.


        :param onsite_payments: The onsite_payments of this PropertyContent.  # noqa: E501
        :type: PropertyContentOnsitePayments
        """

        self._onsite_payments = onsite_payments

    @property
    def rooms(self):
        """Gets the rooms of this PropertyContent.  # noqa: E501

        Information about all of the rooms at the property.  # noqa: E501

        :return: The rooms of this PropertyContent.  # noqa: E501
        :rtype: dict(str, RoomContent)
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this PropertyContent.

        Information about all of the rooms at the property.  # noqa: E501

        :param rooms: The rooms of this PropertyContent.  # noqa: E501
        :type: dict(str, RoomContent)
        """

        self._rooms = rooms

    @property
    def rates(self):
        """Gets the rates of this PropertyContent.  # noqa: E501

        Additional information about the rates offered by the property. This should be used in conjunction with the pricing and other rate-related information in shopping.  # noqa: E501

        :return: The rates of this PropertyContent.  # noqa: E501
        :rtype: dict(str, RateContent)
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this PropertyContent.

        Additional information about the rates offered by the property. This should be used in conjunction with the pricing and other rate-related information in shopping.  # noqa: E501

        :param rates: The rates of this PropertyContent.  # noqa: E501
        :type: dict(str, RateContent)
        """

        self._rates = rates

    @property
    def dates(self):
        """Gets the dates of this PropertyContent.  # noqa: E501


        :return: The dates of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentDates
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this PropertyContent.


        :param dates: The dates of this PropertyContent.  # noqa: E501
        :type: PropertyContentDates
        """

        self._dates = dates

    @property
    def descriptions(self):
        """Gets the descriptions of this PropertyContent.  # noqa: E501


        :return: The descriptions of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentDescriptions
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this PropertyContent.


        :param descriptions: The descriptions of this PropertyContent.  # noqa: E501
        :type: PropertyContentDescriptions
        """

        self._descriptions = descriptions

    @property
    def statistics(self):
        """Gets the statistics of this PropertyContent.  # noqa: E501

        Statistics of the property, such as number of floors. See our [statistics reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known statistics ID and name values.  # noqa: E501

        :return: The statistics of this PropertyContent.  # noqa: E501
        :rtype: dict(str, Statistic)
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this PropertyContent.

        Statistics of the property, such as number of floors. See our [statistics reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known statistics ID and name values.  # noqa: E501

        :param statistics: The statistics of this PropertyContent.  # noqa: E501
        :type: dict(str, Statistic)
        """

        self._statistics = statistics

    @property
    def airports(self):
        """Gets the airports of this PropertyContent.  # noqa: E501


        :return: The airports of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentAirports
        """
        return self._airports

    @airports.setter
    def airports(self, airports):
        """Sets the airports of this PropertyContent.


        :param airports: The airports of this PropertyContent.  # noqa: E501
        :type: PropertyContentAirports
        """

        self._airports = airports

    @property
    def registry_number(self):
        """Gets the registry_number of this PropertyContent.  # noqa: E501

        The property's registry number required by some jurisdictions.  # noqa: E501

        :return: The registry_number of this PropertyContent.  # noqa: E501
        :rtype: str
        """
        return self._registry_number

    @registry_number.setter
    def registry_number(self, registry_number):
        """Sets the registry_number of this PropertyContent.

        The property's registry number required by some jurisdictions.  # noqa: E501

        :param registry_number: The registry_number of this PropertyContent.  # noqa: E501
        :type: str
        """

        self._registry_number = registry_number

    @property
    def themes(self):
        """Gets the themes of this PropertyContent.  # noqa: E501

        Themes that describe the property. See our [themes reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known theme ID and name values.  # noqa: E501

        :return: The themes of this PropertyContent.  # noqa: E501
        :rtype: dict(str, Theme)
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this PropertyContent.

        Themes that describe the property. See our [themes reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known theme ID and name values.  # noqa: E501

        :param themes: The themes of this PropertyContent.  # noqa: E501
        :type: dict(str, Theme)
        """

        self._themes = themes

    @property
    def all_inclusive(self):
        """Gets the all_inclusive of this PropertyContent.  # noqa: E501


        :return: The all_inclusive of this PropertyContent.  # noqa: E501
        :rtype: PropertyContentAllInclusive
        """
        return self._all_inclusive

    @all_inclusive.setter
    def all_inclusive(self, all_inclusive):
        """Sets the all_inclusive of this PropertyContent.


        :param all_inclusive: The all_inclusive of this PropertyContent.  # noqa: E501
        :type: PropertyContentAllInclusive
        """

        self._all_inclusive = all_inclusive

    @property
    def tax_id(self):
        """Gets the tax_id of this PropertyContent.  # noqa: E501

        Tax ID.  # noqa: E501

        :return: The tax_id of this PropertyContent.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this PropertyContent.

        Tax ID.  # noqa: E501

        :param tax_id: The tax_id of this PropertyContent.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def chain(self):
        """Gets the chain of this PropertyContent.  # noqa: E501


        :return: The chain of this PropertyContent.  # noqa: E501
        :rtype: Chain
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this PropertyContent.


        :param chain: The chain of this PropertyContent.  # noqa: E501
        :type: Chain
        """

        self._chain = chain

    @property
    def brand(self):
        """Gets the brand of this PropertyContent.  # noqa: E501


        :return: The brand of this PropertyContent.  # noqa: E501
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PropertyContent.


        :param brand: The brand of this PropertyContent.  # noqa: E501
        :type: Brand
        """

        self._brand = brand

    @property
    def spoken_languages(self):
        """Gets the spoken_languages of this PropertyContent.  # noqa: E501

        Languages spoken at the property.  # noqa: E501

        :return: The spoken_languages of this PropertyContent.  # noqa: E501
        :rtype: dict(str, SpokenLanguage)
        """
        return self._spoken_languages

    @spoken_languages.setter
    def spoken_languages(self, spoken_languages):
        """Sets the spoken_languages of this PropertyContent.

        Languages spoken at the property.  # noqa: E501

        :param spoken_languages: The spoken_languages of this PropertyContent.  # noqa: E501
        :type: dict(str, SpokenLanguage)
        """

        self._spoken_languages = spoken_languages

    @property
    def multi_unit(self):
        """Gets the multi_unit of this PropertyContent.  # noqa: E501

        Boolean value indicating if a property is a multi-unit property.  # noqa: E501

        :return: The multi_unit of this PropertyContent.  # noqa: E501
        :rtype: bool
        """
        return self._multi_unit

    @multi_unit.setter
    def multi_unit(self, multi_unit):
        """Sets the multi_unit of this PropertyContent.

        Boolean value indicating if a property is a multi-unit property.  # noqa: E501

        :param multi_unit: The multi_unit of this PropertyContent.  # noqa: E501
        :type: bool
        """

        self._multi_unit = multi_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
