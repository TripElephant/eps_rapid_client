# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.billing_contact_address import BillingContactAddress  # noqa: F401,E501
from eps_rapid.models.phone import Phone  # noqa: F401,E501


class BillingContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'given_name': 'str',
        'family_name': 'str',
        'email': 'str',
        'phone': 'Phone',
        'address': 'BillingContactAddress'
    }

    attribute_map = {
        'given_name': 'given_name',
        'family_name': 'family_name',
        'email': 'email',
        'phone': 'phone',
        'address': 'address'
    }

    def __init__(self, given_name=None, family_name=None, email=None, phone=None, address=None):  # noqa: E501
        """BillingContact - a model defined in Swagger"""  # noqa: E501

        self._given_name = None
        self._family_name = None
        self._email = None
        self._phone = None
        self._address = None
        self.discriminator = None

        self.given_name = given_name
        self.family_name = family_name
        self.email = email
        self.phone = phone
        self.address = address

    @property
    def given_name(self):
        """Gets the given_name of this BillingContact.  # noqa: E501

        First/given name of the payment type account holder.  # noqa: E501

        :return: The given_name of this BillingContact.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this BillingContact.

        First/given name of the payment type account holder.  # noqa: E501

        :param given_name: The given_name of this BillingContact.  # noqa: E501
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  # noqa: E501

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this BillingContact.  # noqa: E501

        Last/family name of the payment type account holder.  # noqa: E501

        :return: The family_name of this BillingContact.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this BillingContact.

        Last/family name of the payment type account holder.  # noqa: E501

        :param family_name: The family_name of this BillingContact.  # noqa: E501
        :type: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")  # noqa: E501

        self._family_name = family_name

    @property
    def email(self):
        """Gets the email of this BillingContact.  # noqa: E501

        Email of the payment type account holder. Must adhere to standard email format.  # noqa: E501

        :return: The email of this BillingContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BillingContact.

        Email of the payment type account holder. Must adhere to standard email format.  # noqa: E501

        :param email: The email of this BillingContact.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this BillingContact.  # noqa: E501


        :return: The phone of this BillingContact.  # noqa: E501
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this BillingContact.


        :param phone: The phone of this BillingContact.  # noqa: E501
        :type: Phone
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def address(self):
        """Gets the address of this BillingContact.  # noqa: E501


        :return: The address of this BillingContact.  # noqa: E501
        :rtype: BillingContactAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BillingContact.


        :param address: The address of this BillingContact.  # noqa: E501
        :type: BillingContactAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
