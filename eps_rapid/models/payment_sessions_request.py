# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.payment_sessions_request_customer_account_details import PaymentSessionsRequestCustomerAccountDetails  # noqa: F401,E501


class PaymentSessionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'browser_accept_header': 'str',
        'encoded_browser_metadata': 'str',
        'preferred_challenge_window_size': 'str',
        'merchant_url': 'str',
        'customer_account_details': 'PaymentSessionsRequestCustomerAccountDetails',
        'payments': 'object'
    }

    attribute_map = {
        'version': 'version',
        'browser_accept_header': 'browser_accept_header',
        'encoded_browser_metadata': 'encoded_browser_metadata',
        'preferred_challenge_window_size': 'preferred_challenge_window_size',
        'merchant_url': 'merchant_url',
        'customer_account_details': 'customer_account_details',
        'payments': 'payments'
    }

    def __init__(self, version=None, browser_accept_header=None, encoded_browser_metadata=None, preferred_challenge_window_size=None, merchant_url=None, customer_account_details=None, payments=None):  # noqa: E501
        """PaymentSessionsRequest - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._browser_accept_header = None
        self._encoded_browser_metadata = None
        self._preferred_challenge_window_size = None
        self._merchant_url = None
        self._customer_account_details = None
        self._payments = None
        self.discriminator = None

        self.version = version
        self.browser_accept_header = browser_accept_header
        self.encoded_browser_metadata = encoded_browser_metadata
        self.preferred_challenge_window_size = preferred_challenge_window_size
        self.merchant_url = merchant_url
        self.customer_account_details = customer_account_details
        self.payments = payments

    @property
    def version(self):
        """Gets the version of this PaymentSessionsRequest.  # noqa: E501

        The version of the EgPayments.js library.  # noqa: E501

        :return: The version of this PaymentSessionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PaymentSessionsRequest.

        The version of the EgPayments.js library.  # noqa: E501

        :param version: The version of this PaymentSessionsRequest.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def browser_accept_header(self):
        """Gets the browser_accept_header of this PaymentSessionsRequest.  # noqa: E501

        The customer's browser accept header that was used in the booking request.  # noqa: E501

        :return: The browser_accept_header of this PaymentSessionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._browser_accept_header

    @browser_accept_header.setter
    def browser_accept_header(self, browser_accept_header):
        """Sets the browser_accept_header of this PaymentSessionsRequest.

        The customer's browser accept header that was used in the booking request.  # noqa: E501

        :param browser_accept_header: The browser_accept_header of this PaymentSessionsRequest.  # noqa: E501
        :type: str
        """
        if browser_accept_header is None:
            raise ValueError("Invalid value for `browser_accept_header`, must not be `None`")  # noqa: E501

        self._browser_accept_header = browser_accept_header

    @property
    def encoded_browser_metadata(self):
        """Gets the encoded_browser_metadata of this PaymentSessionsRequest.  # noqa: E501

        Encoded browser metadata, provided by the EgPayments.js library.  # noqa: E501

        :return: The encoded_browser_metadata of this PaymentSessionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._encoded_browser_metadata

    @encoded_browser_metadata.setter
    def encoded_browser_metadata(self, encoded_browser_metadata):
        """Sets the encoded_browser_metadata of this PaymentSessionsRequest.

        Encoded browser metadata, provided by the EgPayments.js library.  # noqa: E501

        :param encoded_browser_metadata: The encoded_browser_metadata of this PaymentSessionsRequest.  # noqa: E501
        :type: str
        """
        if encoded_browser_metadata is None:
            raise ValueError("Invalid value for `encoded_browser_metadata`, must not be `None`")  # noqa: E501

        self._encoded_browser_metadata = encoded_browser_metadata

    @property
    def preferred_challenge_window_size(self):
        """Gets the preferred_challenge_window_size of this PaymentSessionsRequest.  # noqa: E501

        The preferred window size that needs to be displayed to the customer. Following are the possible values of this field:   * `extra_small`: 250 x 400   * `small`: 390 x 400   * `medium`: 600 x 400   * `large`: 500 x 600   * `full_screen`: Full screen   # noqa: E501

        :return: The preferred_challenge_window_size of this PaymentSessionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._preferred_challenge_window_size

    @preferred_challenge_window_size.setter
    def preferred_challenge_window_size(self, preferred_challenge_window_size):
        """Sets the preferred_challenge_window_size of this PaymentSessionsRequest.

        The preferred window size that needs to be displayed to the customer. Following are the possible values of this field:   * `extra_small`: 250 x 400   * `small`: 390 x 400   * `medium`: 600 x 400   * `large`: 500 x 600   * `full_screen`: Full screen   # noqa: E501

        :param preferred_challenge_window_size: The preferred_challenge_window_size of this PaymentSessionsRequest.  # noqa: E501
        :type: str
        """
        if preferred_challenge_window_size is None:
            raise ValueError("Invalid value for `preferred_challenge_window_size`, must not be `None`")  # noqa: E501
        allowed_values = ["extra_small", "small", "medium", "large", "full_screen"]  # noqa: E501
        if preferred_challenge_window_size not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_challenge_window_size` ({0}), must be one of {1}"  # noqa: E501
                .format(preferred_challenge_window_size, allowed_values)
            )

        self._preferred_challenge_window_size = preferred_challenge_window_size

    @property
    def merchant_url(self):
        """Gets the merchant_url of this PaymentSessionsRequest.  # noqa: E501

        Fully qualified URL of merchant website or customer care site.  # noqa: E501

        :return: The merchant_url of this PaymentSessionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_url

    @merchant_url.setter
    def merchant_url(self, merchant_url):
        """Sets the merchant_url of this PaymentSessionsRequest.

        Fully qualified URL of merchant website or customer care site.  # noqa: E501

        :param merchant_url: The merchant_url of this PaymentSessionsRequest.  # noqa: E501
        :type: str
        """
        if merchant_url is None:
            raise ValueError("Invalid value for `merchant_url`, must not be `None`")  # noqa: E501

        self._merchant_url = merchant_url

    @property
    def customer_account_details(self):
        """Gets the customer_account_details of this PaymentSessionsRequest.  # noqa: E501


        :return: The customer_account_details of this PaymentSessionsRequest.  # noqa: E501
        :rtype: PaymentSessionsRequestCustomerAccountDetails
        """
        return self._customer_account_details

    @customer_account_details.setter
    def customer_account_details(self, customer_account_details):
        """Sets the customer_account_details of this PaymentSessionsRequest.


        :param customer_account_details: The customer_account_details of this PaymentSessionsRequest.  # noqa: E501
        :type: PaymentSessionsRequestCustomerAccountDetails
        """
        if customer_account_details is None:
            raise ValueError("Invalid value for `customer_account_details`, must not be `None`")  # noqa: E501

        self._customer_account_details = customer_account_details

    @property
    def payments(self):
        """Gets the payments of this PaymentSessionsRequest.  # noqa: E501


        :return: The payments of this PaymentSessionsRequest.  # noqa: E501
        :rtype: object
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this PaymentSessionsRequest.


        :param payments: The payments of this PaymentSessionsRequest.  # noqa: E501
        :type: object
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")  # noqa: E501

        self._payments = payments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSessionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSessionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
