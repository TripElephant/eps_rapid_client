# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.property_availability_without_score_rates import PropertyAvailabilityWithoutScoreRates  # noqa: F401,E501


class PropertyAvailabilityWithoutScoreRooms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'room_name': 'str',
        'rates': 'list[PropertyAvailabilityWithoutScoreRates]'
    }

    attribute_map = {
        'id': 'id',
        'room_name': 'room_name',
        'rates': 'rates'
    }

    def __init__(self, id=None, room_name=None, rates=None):  # noqa: E501
        """PropertyAvailabilityWithoutScoreRooms - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._room_name = None
        self._rates = None
        self.discriminator = None

        self.id = id
        if room_name is not None:
            self.room_name = room_name
        self.rates = rates

    @property
    def id(self):
        """Gets the id of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501

        Unique Identifier for a room type.  # noqa: E501

        :return: The id of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PropertyAvailabilityWithoutScoreRooms.

        Unique Identifier for a room type.  # noqa: E501

        :param id: The id of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def room_name(self):
        """Gets the room_name of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501

        Name of the room type.  # noqa: E501

        :return: The room_name of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this PropertyAvailabilityWithoutScoreRooms.

        Name of the room type.  # noqa: E501

        :param room_name: The room_name of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    @property
    def rates(self):
        """Gets the rates of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501

        Array of objects containing rate information.  # noqa: E501

        :return: The rates of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501
        :rtype: list[PropertyAvailabilityWithoutScoreRates]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this PropertyAvailabilityWithoutScoreRooms.

        Array of objects containing rate information.  # noqa: E501

        :param rates: The rates of this PropertyAvailabilityWithoutScoreRooms.  # noqa: E501
        :type: list[PropertyAvailabilityWithoutScoreRates]
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")  # noqa: E501

        self._rates = rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyAvailabilityWithoutScoreRooms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyAvailabilityWithoutScoreRooms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
