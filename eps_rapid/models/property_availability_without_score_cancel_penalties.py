# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PropertyAvailabilityWithoutScoreCancelPenalties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'start': 'str',
        'end': 'str',
        'amount': 'str',
        'nights': 'str',
        'percent': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'start': 'start',
        'end': 'end',
        'amount': 'amount',
        'nights': 'nights',
        'percent': 'percent'
    }

    def __init__(self, currency=None, start=None, end=None, amount=None, nights=None, percent=None):  # noqa: E501
        """PropertyAvailabilityWithoutScoreCancelPenalties - a model defined in Swagger"""  # noqa: E501

        self._currency = None
        self._start = None
        self._end = None
        self._amount = None
        self._nights = None
        self._percent = None
        self.discriminator = None

        self.currency = currency
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if amount is not None:
            self.amount = amount
        if nights is not None:
            self.nights = nights
        if percent is not None:
            self.percent = percent

    @property
    def currency(self):
        """Gets the currency of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501

        Currency of the amount object.  # noqa: E501

        :return: The currency of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PropertyAvailabilityWithoutScoreCancelPenalties.

        Currency of the amount object.  # noqa: E501

        :param currency: The currency of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def start(self):
        """Gets the start of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501

        Effective date and time of cancellation penalty in extended ISO 8601 format, with ±hh:mm timezone offset  # noqa: E501

        :return: The start of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PropertyAvailabilityWithoutScoreCancelPenalties.

        Effective date and time of cancellation penalty in extended ISO 8601 format, with ±hh:mm timezone offset  # noqa: E501

        :param start: The start of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501

        End date and time of cancellation penalty in extended ISO 8601 format, with ±hh:mm timezone offset  # noqa: E501

        :return: The end of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PropertyAvailabilityWithoutScoreCancelPenalties.

        End date and time of cancellation penalty in extended ISO 8601 format, with ±hh:mm timezone offset  # noqa: E501

        :param end: The end of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def amount(self):
        """Gets the amount of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501

        Penalty amount in request currency.  # noqa: E501

        :return: The amount of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PropertyAvailabilityWithoutScoreCancelPenalties.

        Penalty amount in request currency.  # noqa: E501

        :param amount: The amount of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def nights(self):
        """Gets the nights of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501

        Number of nights charged for as penalty.  # noqa: E501

        :return: The nights of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :rtype: str
        """
        return self._nights

    @nights.setter
    def nights(self, nights):
        """Sets the nights of this PropertyAvailabilityWithoutScoreCancelPenalties.

        Number of nights charged for as penalty.  # noqa: E501

        :param nights: The nights of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :type: str
        """

        self._nights = nights

    @property
    def percent(self):
        """Gets the percent of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501

        Percentage of total booking charged for as penalty. A thirty percent penalty would be returned as 30%  # noqa: E501

        :return: The percent of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :rtype: str
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this PropertyAvailabilityWithoutScoreCancelPenalties.

        Percentage of total booking charged for as penalty. A thirty percent penalty would be returned as 30%  # noqa: E501

        :param percent: The percent of this PropertyAvailabilityWithoutScoreCancelPenalties.  # noqa: E501
        :type: str
        """

        self._percent = percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyAvailabilityWithoutScoreCancelPenalties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyAvailabilityWithoutScoreCancelPenalties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
