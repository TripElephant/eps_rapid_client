# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from eps_rapid.models.amenity import Amenity  # noqa: F401,E501
from eps_rapid.models.bed_group import BedGroup  # noqa: F401,E501
from eps_rapid.models.room_content_area import RoomContentArea  # noqa: F401,E501
from eps_rapid.models.room_content_descriptions import RoomContentDescriptions  # noqa: F401,E501
from eps_rapid.models.room_content_images import RoomContentImages  # noqa: F401,E501
from eps_rapid.models.room_content_occupancy import RoomContentOccupancy  # noqa: F401,E501
from eps_rapid.models.view import View  # noqa: F401,E501


class RoomContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'descriptions': 'RoomContentDescriptions',
        'amenities': 'dict(str, Amenity)',
        'images': 'list[RoomContentImages]',
        'bed_groups': 'dict(str, BedGroup)',
        'area': 'RoomContentArea',
        'views': 'dict(str, View)',
        'occupancy': 'RoomContentOccupancy'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'descriptions': 'descriptions',
        'amenities': 'amenities',
        'images': 'images',
        'bed_groups': 'bed_groups',
        'area': 'area',
        'views': 'views',
        'occupancy': 'occupancy'
    }

    def __init__(self, id=None, name=None, descriptions=None, amenities=None, images=None, bed_groups=None, area=None, views=None, occupancy=None):  # noqa: E501
        """RoomContent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._descriptions = None
        self._amenities = None
        self._images = None
        self._bed_groups = None
        self._area = None
        self._views = None
        self._occupancy = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if descriptions is not None:
            self.descriptions = descriptions
        if amenities is not None:
            self.amenities = amenities
        if images is not None:
            self.images = images
        if bed_groups is not None:
            self.bed_groups = bed_groups
        if area is not None:
            self.area = area
        if views is not None:
            self.views = views
        if occupancy is not None:
            self.occupancy = occupancy

    @property
    def id(self):
        """Gets the id of this RoomContent.  # noqa: E501

        Unique identifier for a room type.  # noqa: E501

        :return: The id of this RoomContent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoomContent.

        Unique identifier for a room type.  # noqa: E501

        :param id: The id of this RoomContent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RoomContent.  # noqa: E501

        Room type name.  # noqa: E501

        :return: The name of this RoomContent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoomContent.

        Room type name.  # noqa: E501

        :param name: The name of this RoomContent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def descriptions(self):
        """Gets the descriptions of this RoomContent.  # noqa: E501


        :return: The descriptions of this RoomContent.  # noqa: E501
        :rtype: RoomContentDescriptions
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this RoomContent.


        :param descriptions: The descriptions of this RoomContent.  # noqa: E501
        :type: RoomContentDescriptions
        """

        self._descriptions = descriptions

    @property
    def amenities(self):
        """Gets the amenities of this RoomContent.  # noqa: E501

        Lists all of the amenities available in the room. See our [amenities reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known amenity ID and name values.  # noqa: E501

        :return: The amenities of this RoomContent.  # noqa: E501
        :rtype: dict(str, Amenity)
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this RoomContent.

        Lists all of the amenities available in the room. See our [amenities reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known amenity ID and name values.  # noqa: E501

        :param amenities: The amenities of this RoomContent.  # noqa: E501
        :type: dict(str, Amenity)
        """

        self._amenities = amenities

    @property
    def images(self):
        """Gets the images of this RoomContent.  # noqa: E501

        The room's images. Contains all room images available.  # noqa: E501

        :return: The images of this RoomContent.  # noqa: E501
        :rtype: list[RoomContentImages]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this RoomContent.

        The room's images. Contains all room images available.  # noqa: E501

        :param images: The images of this RoomContent.  # noqa: E501
        :type: list[RoomContentImages]
        """

        self._images = images

    @property
    def bed_groups(self):
        """Gets the bed_groups of this RoomContent.  # noqa: E501

        A map of the room's bed groups.  # noqa: E501

        :return: The bed_groups of this RoomContent.  # noqa: E501
        :rtype: dict(str, BedGroup)
        """
        return self._bed_groups

    @bed_groups.setter
    def bed_groups(self, bed_groups):
        """Sets the bed_groups of this RoomContent.

        A map of the room's bed groups.  # noqa: E501

        :param bed_groups: The bed_groups of this RoomContent.  # noqa: E501
        :type: dict(str, BedGroup)
        """

        self._bed_groups = bed_groups

    @property
    def area(self):
        """Gets the area of this RoomContent.  # noqa: E501


        :return: The area of this RoomContent.  # noqa: E501
        :rtype: RoomContentArea
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this RoomContent.


        :param area: The area of this RoomContent.  # noqa: E501
        :type: RoomContentArea
        """

        self._area = area

    @property
    def views(self):
        """Gets the views of this RoomContent.  # noqa: E501

        A map of the room views. See our [view reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known room view ID and name values.  # noqa: E501

        :return: The views of this RoomContent.  # noqa: E501
        :rtype: dict(str, View)
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this RoomContent.

        A map of the room views. See our [view reference](https://developer.expediapartnersolutions.com/reference/content-reference-lists-2-3/) for current known room view ID and name values.  # noqa: E501

        :param views: The views of this RoomContent.  # noqa: E501
        :type: dict(str, View)
        """

        self._views = views

    @property
    def occupancy(self):
        """Gets the occupancy of this RoomContent.  # noqa: E501


        :return: The occupancy of this RoomContent.  # noqa: E501
        :rtype: RoomContentOccupancy
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this RoomContent.


        :param occupancy: The occupancy of this RoomContent.  # noqa: E501
        :type: RoomContentOccupancy
        """

        self._occupancy = occupancy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
