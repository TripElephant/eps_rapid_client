# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomContentArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'square_meters': 'float',
        'square_feet': 'float'
    }

    attribute_map = {
        'square_meters': 'square_meters',
        'square_feet': 'square_feet'
    }

    def __init__(self, square_meters=None, square_feet=None):  # noqa: E501
        """RoomContentArea - a model defined in Swagger"""  # noqa: E501

        self._square_meters = None
        self._square_feet = None
        self.discriminator = None

        if square_meters is not None:
            self.square_meters = square_meters
        if square_feet is not None:
            self.square_feet = square_feet

    @property
    def square_meters(self):
        """Gets the square_meters of this RoomContentArea.  # noqa: E501

        The room's area, measured in square meters.  # noqa: E501

        :return: The square_meters of this RoomContentArea.  # noqa: E501
        :rtype: float
        """
        return self._square_meters

    @square_meters.setter
    def square_meters(self, square_meters):
        """Sets the square_meters of this RoomContentArea.

        The room's area, measured in square meters.  # noqa: E501

        :param square_meters: The square_meters of this RoomContentArea.  # noqa: E501
        :type: float
        """

        self._square_meters = square_meters

    @property
    def square_feet(self):
        """Gets the square_feet of this RoomContentArea.  # noqa: E501

        The room's area, measured in square feet.  # noqa: E501

        :return: The square_feet of this RoomContentArea.  # noqa: E501
        :rtype: float
        """
        return self._square_feet

    @square_feet.setter
    def square_feet(self, square_feet):
        """Sets the square_feet of this RoomContentArea.

        The room's area, measured in square feet.  # noqa: E501

        :param square_feet: The square_feet of this RoomContentArea.  # noqa: E501
        :type: float
        """

        self._square_feet = square_feet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomContentArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomContentArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
