# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eps_rapid.api_client import ApiClient


class GeographyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def airports_get(self, accept, accept_encoding, authorization, user_agent, language, include, **kwargs):  # noqa: E501
        """Airports  # noqa: E501

        Returns the geographic definition and property mappings of all airports in our geography system. The response is a map in JSON format, where the key is the IATA airport code and the airport object is the value. The map has no order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airports_get(accept, accept_encoding, authorization, user_agent, language, include, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The value must be lower case.   * details - Include the metadata, coordinates and associated region of the airport.   * property_ids - Include the list of the property IDs within a 20km radius of the airport.   * associated_region_property_ids - Include the list of property IDs within the polygon of the associated region. The associated region is the city or multi-city most commonly associated with the airport.  Example: `include=details&include=property_ids`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Airports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airports_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, **kwargs)  # noqa: E501
        else:
            (data) = self.airports_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, **kwargs)  # noqa: E501
            return data

    def airports_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, language, include, **kwargs):  # noqa: E501
        """Airports  # noqa: E501

        Returns the geographic definition and property mappings of all airports in our geography system. The response is a map in JSON format, where the key is the IATA airport code and the airport object is the value. The map has no order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airports_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The value must be lower case.   * details - Include the metadata, coordinates and associated region of the airport.   * property_ids - Include the list of the property IDs within a 20km radius of the airport.   * associated_region_property_ids - Include the list of property IDs within the polygon of the associated region. The associated region is the city or multi-city most commonly associated with the airport.  Example: `include=details&include=property_ids`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Airports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'language', 'include', 'customer_session_id', 'billing_terms', 'partner_point_of_sale', 'payment_terms', 'platform_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `airports_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `airports_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `airports_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `airports_get`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `airports_get`")  # noqa: E501
        # verify the required parameter 'include' is set
        if ('include' not in params or
                params['include'] is None):
            raise ValueError("Missing the required parameter `include` when calling `airports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'billing_terms' in params:
            query_params.append(('billing_terms', params['billing_terms']))  # noqa: E501
        if 'partner_point_of_sale' in params:
            query_params.append(('partner_point_of_sale', params['partner_point_of_sale']))  # noqa: E501
        if 'payment_terms' in params:
            query_params.append(('payment_terms', params['payment_terms']))  # noqa: E501
        if 'platform_name' in params:
            query_params.append(('platform_name', params['platform_name']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/airports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Airports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airports_iata_airport_code_get(self, accept, accept_encoding, authorization, user_agent, language, include, iata_airport_code, **kwargs):  # noqa: E501
        """Airport  # noqa: E501

        Returns the geographic definition and property mappings for the requested IATA airport code. The response is a single JSON formatted airport object.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airports_iata_airport_code_get(accept, accept_encoding, authorization, user_agent, language, include, iata_airport_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The value must be lower case.   * details - Include the metadata, coordinates and associated region of the airport.   * property_ids - Include the list of the property IDs within a 20km radius of the airport.   * associated_region_property_ids - Include the list of property IDs within the polygon of the associated region. The associated region is the city or multi-city most commonly associated with the airport.  Example: `include=details&include=property_ids`  (required)
        :param str iata_airport_code: 3-character IATA airport code of the airport to retrieve. The code must be upper case.  Example: `ORD`.  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Airport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airports_iata_airport_code_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, iata_airport_code, **kwargs)  # noqa: E501
        else:
            (data) = self.airports_iata_airport_code_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, iata_airport_code, **kwargs)  # noqa: E501
            return data

    def airports_iata_airport_code_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, language, include, iata_airport_code, **kwargs):  # noqa: E501
        """Airport  # noqa: E501

        Returns the geographic definition and property mappings for the requested IATA airport code. The response is a single JSON formatted airport object.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airports_iata_airport_code_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, iata_airport_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The value must be lower case.   * details - Include the metadata, coordinates and associated region of the airport.   * property_ids - Include the list of the property IDs within a 20km radius of the airport.   * associated_region_property_ids - Include the list of property IDs within the polygon of the associated region. The associated region is the city or multi-city most commonly associated with the airport.  Example: `include=details&include=property_ids`  (required)
        :param str iata_airport_code: 3-character IATA airport code of the airport to retrieve. The code must be upper case.  Example: `ORD`.  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Airport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'language', 'include', 'iata_airport_code', 'customer_session_id', 'billing_terms', 'partner_point_of_sale', 'payment_terms', 'platform_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airports_iata_airport_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `airports_iata_airport_code_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `airports_iata_airport_code_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `airports_iata_airport_code_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `airports_iata_airport_code_get`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `airports_iata_airport_code_get`")  # noqa: E501
        # verify the required parameter 'include' is set
        if ('include' not in params or
                params['include'] is None):
            raise ValueError("Missing the required parameter `include` when calling `airports_iata_airport_code_get`")  # noqa: E501
        # verify the required parameter 'iata_airport_code' is set
        if ('iata_airport_code' not in params or
                params['iata_airport_code'] is None):
            raise ValueError("Missing the required parameter `iata_airport_code` when calling `airports_iata_airport_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'iata_airport_code' in params:
            path_params['iata_airport_code'] = params['iata_airport_code']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'billing_terms' in params:
            query_params.append(('billing_terms', params['billing_terms']))  # noqa: E501
        if 'partner_point_of_sale' in params:
            query_params.append(('partner_point_of_sale', params['partner_point_of_sale']))  # noqa: E501
        if 'payment_terms' in params:
            query_params.append(('payment_terms', params['payment_terms']))  # noqa: E501
        if 'platform_name' in params:
            query_params.append(('platform_name', params['platform_name']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/airports/{iata_airport_code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Airport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def properties_geography_post(self, accept, accept_encoding, authorization, content_type, user_agent, include, properties_geography_request_body, **kwargs):  # noqa: E501
        """Properties within Polygon  # noqa: E501

        Returns the properties within an custom polygon that represents a multi-city area or smaller. The coordinates of the polygon should be in [GeoJSON format](https://tools.ietf.org/html/rfc7946) and the polygon must conform to the following restrictions:   * Polygon size - diagonal distance of the polygon must be less than 500km   * Polygon type - only single polygons are supported   * Number of coordinates - must be <= 2000   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_geography_post(accept, accept_encoding, authorization, content_type, user_agent, include, properties_geography_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str content_type: This parameter is to specify which format the partner wants their response to be in. The only supported value is application/json at the moment. Example: `application/json`  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str include: Options for which content to return in the response. The value must be lower case.   * property_ids - Include the property IDs.  Example: `property_ids` Possible values: `property_ids`.  (required)
        :param PropertiesGeoJsonRequest properties_geography_request_body: (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: PropertyGeographyMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.properties_geography_post_with_http_info(accept, accept_encoding, authorization, content_type, user_agent, include, properties_geography_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.properties_geography_post_with_http_info(accept, accept_encoding, authorization, content_type, user_agent, include, properties_geography_request_body, **kwargs)  # noqa: E501
            return data

    def properties_geography_post_with_http_info(self, accept, accept_encoding, authorization, content_type, user_agent, include, properties_geography_request_body, **kwargs):  # noqa: E501
        """Properties within Polygon  # noqa: E501

        Returns the properties within an custom polygon that represents a multi-city area or smaller. The coordinates of the polygon should be in [GeoJSON format](https://tools.ietf.org/html/rfc7946) and the polygon must conform to the following restrictions:   * Polygon size - diagonal distance of the polygon must be less than 500km   * Polygon type - only single polygons are supported   * Number of coordinates - must be <= 2000   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_geography_post_with_http_info(accept, accept_encoding, authorization, content_type, user_agent, include, properties_geography_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str content_type: This parameter is to specify which format the partner wants their response to be in. The only supported value is application/json at the moment. Example: `application/json`  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str include: Options for which content to return in the response. The value must be lower case.   * property_ids - Include the property IDs.  Example: `property_ids` Possible values: `property_ids`.  (required)
        :param PropertiesGeoJsonRequest properties_geography_request_body: (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: PropertyGeographyMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'content_type', 'user_agent', 'include', 'properties_geography_request_body', 'customer_session_id', 'billing_terms', 'partner_point_of_sale', 'payment_terms', 'platform_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_geography_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `properties_geography_post`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `properties_geography_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `properties_geography_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `properties_geography_post`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `properties_geography_post`")  # noqa: E501
        # verify the required parameter 'include' is set
        if ('include' not in params or
                params['include'] is None):
            raise ValueError("Missing the required parameter `include` when calling `properties_geography_post`")  # noqa: E501
        # verify the required parameter 'properties_geography_request_body' is set
        if ('properties_geography_request_body' not in params or
                params['properties_geography_request_body'] is None):
            raise ValueError("Missing the required parameter `properties_geography_request_body` when calling `properties_geography_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'billing_terms' in params:
            query_params.append(('billing_terms', params['billing_terms']))  # noqa: E501
        if 'partner_point_of_sale' in params:
            query_params.append(('partner_point_of_sale', params['partner_point_of_sale']))  # noqa: E501
        if 'payment_terms' in params:
            query_params.append(('payment_terms', params['payment_terms']))  # noqa: E501
        if 'platform_name' in params:
            query_params.append(('platform_name', params['platform_name']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'properties_geography_request_body' in params:
            body_params = params['properties_geography_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/properties/geography', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyGeographyMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def regions_get(self, accept, accept_encoding, authorization, user_agent, language, include, **kwargs):  # noqa: E501
        """Regions  # noqa: E501

        Returns the geographic definition and property mappings of regions matching the specified parameters.<br><br>  To request all regions in the world, omit the `ancestor` query parameter. To request all regions in a specific continent, country or other level, specify the ID of that region as the `ancestor`. Refer to the list of [top level regions](https://developer.expediapartnersolutions.com/reference/geography-reference-lists-2-2/).<br><br>  The response is a paginated list of regions. The response will contain a header, `Link`. The `Link` header contains a single URL to get the immediate next page of results, and follows the [IETF standard](https://tools.ietf.org/html/rfc5988). To get the next page of results, simply follow the `next` URL in the `Link` header without modifying it. When no `Link` header is returned with an empty body and a 200 response code, the pagination has completed. If the link expires, there will be an `expires` link-extension that is the UTC date the link will expire, in ISO 8601 format.<br>  * Example: `<https://api.ean.com/2.3/regions?token=DXF1ZXJ5QW5kRmV0Y2gBAAAAAAdcoBgWbUpHYTdsdFVRc2U4c0xfLUhGMzM1QQ>; rel=\"next\"; expires=\"2019-03-05T07:23:14.000Z\"`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regions_get(accept, accept_encoding, authorization, user_agent, language, include, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The standard and details options cannot be requested together. The value must be lower case.   * standard - Include the metadata and basic hierarchy of each region.   * details - Include the metadata, coordinates and full hierarchy of each region.   * property_ids - Include the list of property IDs within the bounding polygon of each region.   * property_ids_expanded - Include the list of property IDs within the bounding polygon of each region and property IDs from the surrounding area if minimal properties are within the region.  Example: `include=details&include=property_ids`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str ancestor_id: ID of the ancestor of regions to retrieve. Refer to the list of [top level regions](https://developer.expediapartnersolutions.com/reference/geography-reference-lists-2-2/).  Example: `602962`. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Regions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.regions_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, **kwargs)  # noqa: E501
        else:
            (data) = self.regions_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, **kwargs)  # noqa: E501
            return data

    def regions_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, language, include, **kwargs):  # noqa: E501
        """Regions  # noqa: E501

        Returns the geographic definition and property mappings of regions matching the specified parameters.<br><br>  To request all regions in the world, omit the `ancestor` query parameter. To request all regions in a specific continent, country or other level, specify the ID of that region as the `ancestor`. Refer to the list of [top level regions](https://developer.expediapartnersolutions.com/reference/geography-reference-lists-2-2/).<br><br>  The response is a paginated list of regions. The response will contain a header, `Link`. The `Link` header contains a single URL to get the immediate next page of results, and follows the [IETF standard](https://tools.ietf.org/html/rfc5988). To get the next page of results, simply follow the `next` URL in the `Link` header without modifying it. When no `Link` header is returned with an empty body and a 200 response code, the pagination has completed. If the link expires, there will be an `expires` link-extension that is the UTC date the link will expire, in ISO 8601 format.<br>  * Example: `<https://api.ean.com/2.3/regions?token=DXF1ZXJ5QW5kRmV0Y2gBAAAAAAdcoBgWbUpHYTdsdFVRc2U4c0xfLUhGMzM1QQ>; rel=\"next\"; expires=\"2019-03-05T07:23:14.000Z\"`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regions_get_with_http_info(accept, accept_encoding, authorization, user_agent, language, include, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The standard and details options cannot be requested together. The value must be lower case.   * standard - Include the metadata and basic hierarchy of each region.   * details - Include the metadata, coordinates and full hierarchy of each region.   * property_ids - Include the list of property IDs within the bounding polygon of each region.   * property_ids_expanded - Include the list of property IDs within the bounding polygon of each region and property IDs from the surrounding area if minimal properties are within the region.  Example: `include=details&include=property_ids`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str ancestor_id: ID of the ancestor of regions to retrieve. Refer to the list of [top level regions](https://developer.expediapartnersolutions.com/reference/geography-reference-lists-2-2/).  Example: `602962`. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Regions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'language', 'include', 'customer_session_id', 'ancestor_id', 'billing_terms', 'partner_point_of_sale', 'payment_terms', 'platform_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `regions_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `regions_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `regions_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `regions_get`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `regions_get`")  # noqa: E501
        # verify the required parameter 'include' is set
        if ('include' not in params or
                params['include'] is None):
            raise ValueError("Missing the required parameter `include` when calling `regions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'ancestor_id' in params:
            query_params.append(('ancestor_id', params['ancestor_id']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'billing_terms' in params:
            query_params.append(('billing_terms', params['billing_terms']))  # noqa: E501
        if 'partner_point_of_sale' in params:
            query_params.append(('partner_point_of_sale', params['partner_point_of_sale']))  # noqa: E501
        if 'payment_terms' in params:
            query_params.append(('payment_terms', params['payment_terms']))  # noqa: E501
        if 'platform_name' in params:
            query_params.append(('platform_name', params['platform_name']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Regions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def regions_region_id_get(self, accept, accept_encoding, authorization, user_agent, region_id, language, include, **kwargs):  # noqa: E501
        """Region  # noqa: E501

        Returns the geographic definition and property mappings for the requested Region ID. The response is a single JSON formatted region object.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regions_region_id_get(accept, accept_encoding, authorization, user_agent, region_id, language, include, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str region_id: ID of the region to retrieve.  Example: `602962`.  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The value must be lower case.   * details - Include the metadata, coordinates and full hierarchy of the region.   * property_ids - Include the list of property IDs within the bounding polygon of the region.   * property_ids_expanded - Include the list of property IDs within the bounding polygon of the region and property IDs from the surrounding area if minimal properties are within the region.  Example: `include=details&include=property_ids`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Region
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.regions_region_id_get_with_http_info(accept, accept_encoding, authorization, user_agent, region_id, language, include, **kwargs)  # noqa: E501
        else:
            (data) = self.regions_region_id_get_with_http_info(accept, accept_encoding, authorization, user_agent, region_id, language, include, **kwargs)  # noqa: E501
            return data

    def regions_region_id_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, region_id, language, include, **kwargs):  # noqa: E501
        """Region  # noqa: E501

        Returns the geographic definition and property mappings for the requested Region ID. The response is a single JSON formatted region object.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regions_region_id_get_with_http_info(accept, accept_encoding, authorization, user_agent, region_id, language, include, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str region_id: ID of the region to retrieve.  Example: `602962`.  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param list[str] include: Options for which content to return in the response. This parameter can be supplied multiple times with different values. The value must be lower case.   * details - Include the metadata, coordinates and full hierarchy of the region.   * property_ids - Include the list of property IDs within the bounding polygon of the region.   * property_ids_expanded - Include the list of property IDs within the bounding polygon of the region and property IDs from the surrounding area if minimal properties are within the region.  Example: `include=details&include=property_ids`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: Region
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'region_id', 'language', 'include', 'customer_session_id', 'billing_terms', 'partner_point_of_sale', 'payment_terms', 'platform_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regions_region_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `regions_region_id_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `regions_region_id_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `regions_region_id_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `regions_region_id_get`")  # noqa: E501
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `regions_region_id_get`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `regions_region_id_get`")  # noqa: E501
        # verify the required parameter 'include' is set
        if ('include' not in params or
                params['include'] is None):
            raise ValueError("Missing the required parameter `include` when calling `regions_region_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['region_id'] = params['region_id']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'billing_terms' in params:
            query_params.append(('billing_terms', params['billing_terms']))  # noqa: E501
        if 'partner_point_of_sale' in params:
            query_params.append(('partner_point_of_sale', params['partner_point_of_sale']))  # noqa: E501
        if 'payment_terms' in params:
            query_params.append(('payment_terms', params['payment_terms']))  # noqa: E501
        if 'platform_name' in params:
            query_params.append(('platform_name', params['platform_name']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/regions/{region_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Region',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
