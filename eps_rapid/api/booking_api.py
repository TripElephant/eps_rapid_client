# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eps_rapid.api_client import ApiClient


class BookingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def itineraries_itinerary_id_payment_sessions_put(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs):  # noqa: E501
        """Complete Payment Session  # noqa: E501

        <b>This link only applies to transactions where EPS takes the customer's payment information. This includes both Expedia Collect and Property Collect transactions.</b><br> This link will be available in the booking response only if you've opted into Two-Factor Authentication to comply with the September 2019 EU Regulations for PSD2. It should be called after Two-Factor Authentication has been completed by the customer in order to finalize the payment and complete the booking or hold attempt. Learn more with our [PSD2 Overview](https://developer.expediapartnersolutions.com/reference/psd2-regulation/)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_payment_sessions_put(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The payment-sessions call has a test header that can be used to return set responses with the following keywords:<br> * `standard` * `service_unavailable` * `internal_server_error` 
        :return: CompletePaymentSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_itinerary_id_payment_sessions_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_itinerary_id_payment_sessions_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs)  # noqa: E501
            return data

    def itineraries_itinerary_id_payment_sessions_put_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs):  # noqa: E501
        """Complete Payment Session  # noqa: E501

        <b>This link only applies to transactions where EPS takes the customer's payment information. This includes both Expedia Collect and Property Collect transactions.</b><br> This link will be available in the booking response only if you've opted into Two-Factor Authentication to comply with the September 2019 EU Regulations for PSD2. It should be called after Two-Factor Authentication has been completed by the customer in order to finalize the payment and complete the booking or hold attempt. Learn more with our [PSD2 Overview](https://developer.expediapartnersolutions.com/reference/psd2-regulation/)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_payment_sessions_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The payment-sessions call has a test header that can be used to return set responses with the following keywords:<br> * `standard` * `service_unavailable` * `internal_server_error` 
        :return: CompletePaymentSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'itinerary_id', 'token', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_itinerary_id_payment_sessions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501
        # verify the required parameter 'itinerary_id' is set
        if ('itinerary_id' not in params or
                params['itinerary_id'] is None):
            raise ValueError("Missing the required parameter `itinerary_id` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `itineraries_itinerary_id_payment_sessions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'itinerary_id' in params:
            path_params['itinerary_id'] = params['itinerary_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries/{itinerary_id}/payment-sessions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompletePaymentSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def itineraries_itinerary_id_put(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs):  # noqa: E501
        """Resume Booking  # noqa: E501

        This link will be available in the booking response after creating a held booking.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_put(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The resume call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test held booking. * `service_unavailable` * `internal_server_error` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_itinerary_id_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_itinerary_id_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs)  # noqa: E501
            return data

    def itineraries_itinerary_id_put_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs):  # noqa: E501
        """Resume Booking  # noqa: E501

        This link will be available in the booking response after creating a held booking.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The resume call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test held booking. * `service_unavailable` * `internal_server_error` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'itinerary_id', 'token', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_itinerary_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_itinerary_id_put`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_itinerary_id_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_itinerary_id_put`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_itinerary_id_put`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_itinerary_id_put`")  # noqa: E501
        # verify the required parameter 'itinerary_id' is set
        if ('itinerary_id' not in params or
                params['itinerary_id'] is None):
            raise ValueError("Missing the required parameter `itinerary_id` when calling `itineraries_itinerary_id_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `itineraries_itinerary_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'itinerary_id' in params:
            path_params['itinerary_id'] = params['itinerary_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries/{itinerary_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def itineraries_post(self, accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, itinerary_request_body, **kwargs):  # noqa: E501
        """Create Booking  # noqa: E501

        This link will be available in the Price Check response or in the register payments response when Two-Factor Authentication is used. It returns an itinerary id and links to retrieve reservation details, cancel a held booking, resume a held booking or complete payment session. Please note that depending on the state of the booking, the response will contain only the applicable link(s).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_post(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, itinerary_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str content_type: This parameter is to specify which format the partner wants their response to be in. The only supported value is application/json at the moment. Example: `application/json`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param CreateItineraryRequest itinerary_request_body:  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The book call has a test header that can be used to return set responses with the following keywords:<br> * `standard` * `complete_payment_session` * `service_unavailable` * `internal_server_error` * `price_mismatch` * `cc_declined` * `rooms_unavailable` 
        :return: CreateItinerary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_post_with_http_info(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, itinerary_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_post_with_http_info(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, itinerary_request_body, **kwargs)  # noqa: E501
            return data

    def itineraries_post_with_http_info(self, accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, itinerary_request_body, **kwargs):  # noqa: E501
        """Create Booking  # noqa: E501

        This link will be available in the Price Check response or in the register payments response when Two-Factor Authentication is used. It returns an itinerary id and links to retrieve reservation details, cancel a held booking, resume a held booking or complete payment session. Please note that depending on the state of the booking, the response will contain only the applicable link(s).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_post_with_http_info(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, itinerary_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str content_type: This parameter is to specify which format the partner wants their response to be in. The only supported value is application/json at the moment. Example: `application/json`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param CreateItineraryRequest itinerary_request_body:  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The book call has a test header that can be used to return set responses with the following keywords:<br> * `standard` * `complete_payment_session` * `service_unavailable` * `internal_server_error` * `price_mismatch` * `cc_declined` * `rooms_unavailable` 
        :return: CreateItinerary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'content_type', 'customer_ip', 'user_agent', 'token', 'itinerary_request_body', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `itineraries_post`")  # noqa: E501
        # verify the required parameter 'itinerary_request_body' is set
        if ('itinerary_request_body' not in params or
                params['itinerary_request_body'] is None):
            raise ValueError("Missing the required parameter `itinerary_request_body` when calling `itineraries_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'itinerary_request_body' in params:
            body_params = params['itinerary_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateItinerary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payment_sessions_post(self, accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, payment_sessions_request_body, **kwargs):  # noqa: E501
        """Register Payments  # noqa: E501

        <b>This link only applies to transactions where EPS takes the customer's payment information. This includes both Expedia Collect and Property Collect transactions.</b><br> This link will be available in the Price Check response if payment registration is required. It returns a payment session ID and a link to create a booking. This will be the first step in the booking flow only if you've opted into Two-Factor Authentication to comply with the September 2019 EU Regulations for PSD2. Learn more with our [PSD2 Overview](https://developer.expediapartnersolutions.com/reference/psd2-regulation/)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_sessions_post(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, payment_sessions_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str content_type: This parameter is to specify which format the partner wants their response to be in. The only supported value is application/json at the moment. Example: `application/json`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param PaymentSessionsRequest payment_sessions_request_body: (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The book call has a test header that can be used to return set responses with the following keywords:<br> * `standard` * `service_unavailable` * `internal_server_error` 
        :return: PaymentSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payment_sessions_post_with_http_info(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, payment_sessions_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.payment_sessions_post_with_http_info(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, payment_sessions_request_body, **kwargs)  # noqa: E501
            return data

    def payment_sessions_post_with_http_info(self, accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, payment_sessions_request_body, **kwargs):  # noqa: E501
        """Register Payments  # noqa: E501

        <b>This link only applies to transactions where EPS takes the customer's payment information. This includes both Expedia Collect and Property Collect transactions.</b><br> This link will be available in the Price Check response if payment registration is required. It returns a payment session ID and a link to create a booking. This will be the first step in the booking flow only if you've opted into Two-Factor Authentication to comply with the September 2019 EU Regulations for PSD2. Learn more with our [PSD2 Overview](https://developer.expediapartnersolutions.com/reference/psd2-regulation/)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payment_sessions_post_with_http_info(accept, accept_encoding, authorization, content_type, customer_ip, user_agent, token, payment_sessions_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str content_type: This parameter is to specify which format the partner wants their response to be in. The only supported value is application/json at the moment. Example: `application/json`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param PaymentSessionsRequest payment_sessions_request_body: (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The book call has a test header that can be used to return set responses with the following keywords:<br> * `standard` * `service_unavailable` * `internal_server_error` 
        :return: PaymentSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'content_type', 'customer_ip', 'user_agent', 'token', 'payment_sessions_request_body', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payment_sessions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `payment_sessions_post`")  # noqa: E501
        # verify the required parameter 'payment_sessions_request_body' is set
        if ('payment_sessions_request_body' not in params or
                params['payment_sessions_request_body'] is None):
            raise ValueError("Missing the required parameter `payment_sessions_request_body` when calling `payment_sessions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment_sessions_request_body' in params:
            body_params = params['payment_sessions_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payment-sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSessions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
