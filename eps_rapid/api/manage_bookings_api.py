# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eps_rapid.api_client import ApiClient


class ManageBookingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def itineraries_get(self, accept, accept_encoding, authorization, customer_ip, user_agent, affiliate_reference_id, email, **kwargs):  # noqa: E501
        """Retrieve Booking with Affiliate Reference Id  # noqa: E501

        This can be called directly without a token when an affiliate reference id is provided. It returns details about a booking associated with the affiliate reference id along with cancel links to cancel the booking.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_get(accept, accept_encoding, authorization, customer_ip, user_agent, affiliate_reference_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str affiliate_reference_id: The affilliate reference id value. Example: `111A222BB33344CC5555`  (required)
        :param str email: Email associated with the booking.<br> Example: `test@example.com`.  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The retrieve call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test booking. * `service_unavailable` * `internal_server_error` 
        :return: Retrieve
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_get_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, affiliate_reference_id, email, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_get_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, affiliate_reference_id, email, **kwargs)  # noqa: E501
            return data

    def itineraries_get_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, affiliate_reference_id, email, **kwargs):  # noqa: E501
        """Retrieve Booking with Affiliate Reference Id  # noqa: E501

        This can be called directly without a token when an affiliate reference id is provided. It returns details about a booking associated with the affiliate reference id along with cancel links to cancel the booking.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_get_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, affiliate_reference_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str affiliate_reference_id: The affilliate reference id value. Example: `111A222BB33344CC5555`  (required)
        :param str email: Email associated with the booking.<br> Example: `test@example.com`.  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The retrieve call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test booking. * `service_unavailable` * `internal_server_error` 
        :return: Retrieve
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'affiliate_reference_id', 'email', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_get`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_get`")  # noqa: E501
        # verify the required parameter 'affiliate_reference_id' is set
        if ('affiliate_reference_id' not in params or
                params['affiliate_reference_id'] is None):
            raise ValueError("Missing the required parameter `affiliate_reference_id` when calling `itineraries_get`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `itineraries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'affiliate_reference_id' in params:
            query_params.append(('affiliate_reference_id', params['affiliate_reference_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Retrieve',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def itineraries_itinerary_id_delete(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs):  # noqa: E501
        """Cancel Held Booking  # noqa: E501

        This link will be available in a held booking response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_delete(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The cancel call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test held booking. * `service_unavailable` * `internal_server_error` * `post_stay_cancel` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_itinerary_id_delete_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_itinerary_id_delete_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs)  # noqa: E501
            return data

    def itineraries_itinerary_id_delete_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, **kwargs):  # noqa: E501
        """Cancel Held Booking  # noqa: E501

        This link will be available in a held booking response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_delete_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The cancel call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test held booking. * `service_unavailable` * `internal_server_error` * `post_stay_cancel` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'itinerary_id', 'token', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_itinerary_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_itinerary_id_delete`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_itinerary_id_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_itinerary_id_delete`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_itinerary_id_delete`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_itinerary_id_delete`")  # noqa: E501
        # verify the required parameter 'itinerary_id' is set
        if ('itinerary_id' not in params or
                params['itinerary_id'] is None):
            raise ValueError("Missing the required parameter `itinerary_id` when calling `itineraries_itinerary_id_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `itineraries_itinerary_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'itinerary_id' in params:
            path_params['itinerary_id'] = params['itinerary_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries/{itinerary_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def itineraries_itinerary_id_get(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, **kwargs):  # noqa: E501
        """Retrieve Booking  # noqa: E501

        This API call returns itinerary details and links to resume or cancel the booking. There are two methods to retrieve a booking: * Using the link included in the original Book response, example: https://api.ean.com/2.3/itineraries/8955599932111?token=QldfCGlcUA4GXVlSAQ4W * Using the email of the booking, example: https://api.ean.com/2.3/itineraries/8955599932111?email=customer@email.com   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_get(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * `standard` - Requires valid test booking. * `service_unavailable` * `internal_server_error` 
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m` 
        :param str email: Email associated with the booking. (Email is required if the token is not provided the request) <br> Example: `test@example.com`. 
        :return: Retrieve
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_itinerary_id_get_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_itinerary_id_get_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, **kwargs)  # noqa: E501
            return data

    def itineraries_itinerary_id_get_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, **kwargs):  # noqa: E501
        """Retrieve Booking  # noqa: E501

        This API call returns itinerary details and links to resume or cancel the booking. There are two methods to retrieve a booking: * Using the link included in the original Book response, example: https://api.ean.com/2.3/itineraries/8955599932111?token=QldfCGlcUA4GXVlSAQ4W * Using the email of the booking, example: https://api.ean.com/2.3/itineraries/8955599932111?email=customer@email.com   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_get_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The retrieve call has a test header that can be used to return set responses. Passing standard in the Test header will retrieve a test booking, and passing any of the errors listed below will return a stubbed error response that you can use to test your error handling code. Additionally, refer to the Test Request documentation for more details on how these header values are used. * `standard` - Requires valid test booking. * `service_unavailable` * `internal_server_error` 
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m` 
        :param str email: Email associated with the booking. (Email is required if the token is not provided the request) <br> Example: `test@example.com`. 
        :return: Retrieve
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'itinerary_id', 'customer_session_id', 'test', 'token', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_itinerary_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_itinerary_id_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_itinerary_id_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_itinerary_id_get`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_itinerary_id_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_itinerary_id_get`")  # noqa: E501
        # verify the required parameter 'itinerary_id' is set
        if ('itinerary_id' not in params or
                params['itinerary_id'] is None):
            raise ValueError("Missing the required parameter `itinerary_id` when calling `itineraries_itinerary_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'itinerary_id' in params:
            path_params['itinerary_id'] = params['itinerary_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries/{itinerary_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Retrieve',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def itineraries_itinerary_id_rooms_room_id_delete(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, **kwargs):  # noqa: E501
        """Cancel a room.  # noqa: E501

        This link will be available in the retrieve response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_rooms_room_id_delete(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str room_id: Room ID of a property.<br> Example: `123abc`.  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The cancel call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test booking. * `service_unavailable` * `unknown_internal_error` * `post_stay_cancel` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_itinerary_id_rooms_room_id_delete_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_itinerary_id_rooms_room_id_delete_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, **kwargs)  # noqa: E501
            return data

    def itineraries_itinerary_id_rooms_room_id_delete_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, **kwargs):  # noqa: E501
        """Cancel a room.  # noqa: E501

        This link will be available in the retrieve response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_rooms_room_id_delete_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str room_id: Room ID of a property.<br> Example: `123abc`.  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The cancel call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test booking. * `service_unavailable` * `unknown_internal_error` * `post_stay_cancel` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'itinerary_id', 'room_id', 'token', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_itinerary_id_rooms_room_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'itinerary_id' is set
        if ('itinerary_id' not in params or
                params['itinerary_id'] is None):
            raise ValueError("Missing the required parameter `itinerary_id` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'room_id' is set
        if ('room_id' not in params or
                params['room_id'] is None):
            raise ValueError("Missing the required parameter `room_id` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `itineraries_itinerary_id_rooms_room_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'itinerary_id' in params:
            path_params['itinerary_id'] = params['itinerary_id']  # noqa: E501
        if 'room_id' in params:
            path_params['room_id'] = params['room_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries/{itinerary_id}/rooms/{room_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def itineraries_itinerary_id_rooms_room_id_put(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, room_details_request_body, **kwargs):  # noqa: E501
        """Change details of a room.  # noqa: E501

        This link will be available in the retrieve response. Changes in smoking preference and special request will be passed along to the property and are not guaranteed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_rooms_room_id_put(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, room_details_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str room_id: Room ID of a property.<br> Example: `123abc`.  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param ChangeRoomDetailsRequest room_details_request_body: The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The change call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test booking. * `service_unavailable` * `unknown_internal_error` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.itineraries_itinerary_id_rooms_room_id_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, room_details_request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.itineraries_itinerary_id_rooms_room_id_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, room_details_request_body, **kwargs)  # noqa: E501
            return data

    def itineraries_itinerary_id_rooms_room_id_put_with_http_info(self, accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, room_details_request_body, **kwargs):  # noqa: E501
        """Change details of a room.  # noqa: E501

        This link will be available in the retrieve response. Changes in smoking preference and special request will be passed along to the property and are not guaranteed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.itineraries_itinerary_id_rooms_room_id_put_with_http_info(accept, accept_encoding, authorization, customer_ip, user_agent, itinerary_id, room_id, token, room_details_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics.  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str itinerary_id: This parameter is used only to prefix the token value - no ID value is used.<br> Example: `8955599932111`  (required)
        :param str room_id: Room ID of a property.<br> Example: `123abc`.  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param ChangeRoomDetailsRequest room_details_request_body: The request body is required, but only the fields that are being changed need to be passed in. Fields that are not being changed should not be included in the request body. (required)
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: The change call has a test header that can be used to return set responses with the following keywords:<br> * `standard` - Requires valid test booking. * `service_unavailable` * `unknown_internal_error` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'customer_ip', 'user_agent', 'itinerary_id', 'room_id', 'token', 'room_details_request_body', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method itineraries_itinerary_id_rooms_room_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'customer_ip' is set
        if ('customer_ip' not in params or
                params['customer_ip'] is None):
            raise ValueError("Missing the required parameter `customer_ip` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'itinerary_id' is set
        if ('itinerary_id' not in params or
                params['itinerary_id'] is None):
            raise ValueError("Missing the required parameter `itinerary_id` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'room_id' is set
        if ('room_id' not in params or
                params['room_id'] is None):
            raise ValueError("Missing the required parameter `room_id` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501
        # verify the required parameter 'room_details_request_body' is set
        if ('room_details_request_body' not in params or
                params['room_details_request_body'] is None):
            raise ValueError("Missing the required parameter `room_details_request_body` when calling `itineraries_itinerary_id_rooms_room_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'itinerary_id' in params:
            path_params['itinerary_id'] = params['itinerary_id']  # noqa: E501
        if 'room_id' in params:
            path_params['room_id'] = params['room_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'room_details_request_body' in params:
            body_params = params['room_details_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/itineraries/{itinerary_id}/rooms/{room_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
