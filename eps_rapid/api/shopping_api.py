# coding: utf-8

"""
    Rapid

    EPS Rapid V2.3  # noqa: E501

    OpenAPI spec version: 2.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eps_rapid.api_client import ApiClient


class ShoppingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def properties_availability_get(self, accept, accept_encoding, authorization, user_agent, checkin, checkout, currency, language, country_code, occupancy, property_id, sales_channel, sales_environment, sort_type, rate_plan_count, **kwargs):  # noqa: E501
        """Get property room rates and availability  # noqa: E501

        Returns rates and availability on all room types for specified properties (maximum of 250 properties per request).  The response includes rate details such as promos, whether the rate is refundable, cancellation penalties and a full price breakdown to meet the price display requirements for your market. * Multiple rooms of the same type may be requested by including multiple instances of the `occupancy` parameter. * The `nightly` array includes each individual night's charges. When the total price includes fees, charges, or adjustments that are not divided by night, these amounts will be included in the `stay` rate array, which details charges applied to the entire stay (each check-in).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_availability_get(accept, accept_encoding, authorization, user_agent, checkin, checkout, currency, language, country_code, occupancy, property_id, sales_channel, sales_environment, sort_type, rate_plan_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str checkin: Check-in date, in ISO 8601 format (YYYY-MM-DD) Example: `2018-09-15`.  (required)
        :param str checkout: Check-out date, in ISO 8601 format (YYYY-MM-DD). Availability can be searched up to 500 days in advance of this date. Total length of stay cannot exceed 28 nights.  Example: `2018-09-17`.  (required)
        :param str currency: Requested currency for the rates, in ISO 4217 format<br> Example: `USD`.<br> Currency Options: [https://developer.expediapartnersolutions.com/reference/currency-options/](https://developer.expediapartnersolutions.com/reference/currency-options/)  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param str country_code: Integrations that use multiple points of sale (POS) must pass the country code that matches the point of sale being used for each specific request. For Example: .co.mx would pass in MX or .co.uk would pass in UK. For primary root (.com, .net, .biz, etc) domains, pass the country in which the majority of business occurs.<br> For more information see: [https://www.iso.org/obp/ui/#search/code/](https://www.iso.org/obp/ui/#search/code/)<br>  (required)
        :param list[str] occupancy: Defines the requested occupancy for a single room. Each room must have at least 1 adult occupant.<br> Format: `numberOfAdults[-firstChildAge[,nextChildAge]]`<br> To request multiple rooms (of the same type), include one instance of occupancy for each room requested. Up to 8 rooms may be requested or booked at once.<br> Examples: * 2 adults, one 9-year-old and one 4-year-old would be represented by `occupancy=2-9,4`.<br> * A multi-room request to lodge an additional 2 adults would be represented by `occupancy=2-9,4&occupancy=2`  (required)
        :param list[str] property_id: The ID of the property you want to search for. You can provide 1 to 250 property_id parameters.  Example: `property_id=19248&property_id=20321`  (required)
        :param str sales_channel: You must provide the sales channel for the display of rates. EPS dynamically provides the best content for optimal conversion on each sales channel. If you have a sales channel that is not currently supported in this list, please contact our support team.<br> * `website` - Standard website accessed from the customer's computer * `agent_tool` - Your own agent tool used by your call center or retail store agent * `mobile_app` - An application installed on a phone or tablet device * `mobile_web` - A web browser application on a phone or tablet device * `meta` - Rates will be passed to and displayed on a 3rd party comparison website * `cache` - Rates will be used to populate a local cache  (required)
        :param str sales_environment: You must provide the sales environment in which rates will be sold. EPS dynamically provides the best content for optimal conversion. If you have a sales environment that is not currently supported in this list, please contact our support team.<br> * `hotel_package` - Use when selling the hotel with a transport product, e.g. flight & hotel. * `hotel_only` - Use when selling the hotel as an individual product. * `loyalty` - Use when you are selling the hotel as part of a loyalty program and the price is converted to points.  (required)
        :param str sort_type: Order properties should be returned in. If the requested sort type cannot be applied, the response will include a Warning header indicating the results are unsorted.<br> * `preferred` - Sort optimised for profitability.  (required)
        :param float rate_plan_count: The number of rates to return per property. This will return the lowest rate first, on up to the highest rate. The lowest rate has been proven to provide the best conversion rate and so a value of 1 is recommended.  The value must be greater than 0.  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: Shop calls have a test header that can be used to return set responses with the following keywords:<br> * `standard` * `service_unavailable` * `unknown_internal_error` 
        :param list[str] filter: Single filter type. Send multiple instances of this parameter to request multiple filters.<br> * `refundable` - Filters results to only show fully refundable rates. * `expedia_collect` - Filters results to only show rates where payment is collected by Expedia at the time of booking. These properties can be eligible for payments via Expedia Affiliate Collect(EAC). * `property_collect` - Filters results to only show rates where payment is collected by the property after booking. This can include rates that require a deposit by the property, dependent upon the deposit policies.  Example: `filter=refundable&filter=expedia_collect` 
        :param list[str] rate_option: Request specific rate options for each property. Send multiple instances of this parameter to request multiple rate options. Accepted values:<br> * `closed_user_group` - Return closed user group rates for each property. This feature must be enabled and requires a user to be logged in to request these rates. * `net_rates` - Return net rates for each property. This feature must be enabled to request these rates. * `cross_sell` - Identify if the traffic is coming from a cross sell booking. Where the traveler has booked another service (flight, car, activities...) before hotel.  Example: `rate_option=closed_user_group&rate_option=net_rates` 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: PropertyAvailabilities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.properties_availability_get_with_http_info(accept, accept_encoding, authorization, user_agent, checkin, checkout, currency, language, country_code, occupancy, property_id, sales_channel, sales_environment, sort_type, rate_plan_count, **kwargs)  # noqa: E501
        else:
            (data) = self.properties_availability_get_with_http_info(accept, accept_encoding, authorization, user_agent, checkin, checkout, currency, language, country_code, occupancy, property_id, sales_channel, sales_environment, sort_type, rate_plan_count, **kwargs)  # noqa: E501
            return data

    def properties_availability_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, checkin, checkout, currency, language, country_code, occupancy, property_id, sales_channel, sales_environment, sort_type, rate_plan_count, **kwargs):  # noqa: E501
        """Get property room rates and availability  # noqa: E501

        Returns rates and availability on all room types for specified properties (maximum of 250 properties per request).  The response includes rate details such as promos, whether the rate is refundable, cancellation penalties and a full price breakdown to meet the price display requirements for your market. * Multiple rooms of the same type may be requested by including multiple instances of the `occupancy` parameter. * The `nightly` array includes each individual night's charges. When the total price includes fees, charges, or adjustments that are not divided by night, these amounts will be included in the `stay` rate array, which details charges applied to the entire stay (each check-in).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_availability_get_with_http_info(accept, accept_encoding, authorization, user_agent, checkin, checkout, currency, language, country_code, occupancy, property_id, sales_channel, sales_environment, sort_type, rate_plan_count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str checkin: Check-in date, in ISO 8601 format (YYYY-MM-DD) Example: `2018-09-15`.  (required)
        :param str checkout: Check-out date, in ISO 8601 format (YYYY-MM-DD). Availability can be searched up to 500 days in advance of this date. Total length of stay cannot exceed 28 nights.  Example: `2018-09-17`.  (required)
        :param str currency: Requested currency for the rates, in ISO 4217 format<br> Example: `USD`.<br> Currency Options: [https://developer.expediapartnersolutions.com/reference/currency-options/](https://developer.expediapartnersolutions.com/reference/currency-options/)  (required)
        :param str language: Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes. Use only ISO639-1 alpha 2 language codes and ISO3166-1 alpha 2 country codes. See [https://www.w3.org/International/articles/language-tags/](https://www.w3.org/International/articles/language-tags/)  Example: `language=en-US`  Language Options: [https://developer.expediapartnersolutions.com/reference/language-options/](https://developer.expediapartnersolutions.com/reference/language-options/)  (required)
        :param str country_code: Integrations that use multiple points of sale (POS) must pass the country code that matches the point of sale being used for each specific request. For Example: .co.mx would pass in MX or .co.uk would pass in UK. For primary root (.com, .net, .biz, etc) domains, pass the country in which the majority of business occurs.<br> For more information see: [https://www.iso.org/obp/ui/#search/code/](https://www.iso.org/obp/ui/#search/code/)<br>  (required)
        :param list[str] occupancy: Defines the requested occupancy for a single room. Each room must have at least 1 adult occupant.<br> Format: `numberOfAdults[-firstChildAge[,nextChildAge]]`<br> To request multiple rooms (of the same type), include one instance of occupancy for each room requested. Up to 8 rooms may be requested or booked at once.<br> Examples: * 2 adults, one 9-year-old and one 4-year-old would be represented by `occupancy=2-9,4`.<br> * A multi-room request to lodge an additional 2 adults would be represented by `occupancy=2-9,4&occupancy=2`  (required)
        :param list[str] property_id: The ID of the property you want to search for. You can provide 1 to 250 property_id parameters.  Example: `property_id=19248&property_id=20321`  (required)
        :param str sales_channel: You must provide the sales channel for the display of rates. EPS dynamically provides the best content for optimal conversion on each sales channel. If you have a sales channel that is not currently supported in this list, please contact our support team.<br> * `website` - Standard website accessed from the customer's computer * `agent_tool` - Your own agent tool used by your call center or retail store agent * `mobile_app` - An application installed on a phone or tablet device * `mobile_web` - A web browser application on a phone or tablet device * `meta` - Rates will be passed to and displayed on a 3rd party comparison website * `cache` - Rates will be used to populate a local cache  (required)
        :param str sales_environment: You must provide the sales environment in which rates will be sold. EPS dynamically provides the best content for optimal conversion. If you have a sales environment that is not currently supported in this list, please contact our support team.<br> * `hotel_package` - Use when selling the hotel with a transport product, e.g. flight & hotel. * `hotel_only` - Use when selling the hotel as an individual product. * `loyalty` - Use when you are selling the hotel as part of a loyalty program and the price is converted to points.  (required)
        :param str sort_type: Order properties should be returned in. If the requested sort type cannot be applied, the response will include a Warning header indicating the results are unsorted.<br> * `preferred` - Sort optimised for profitability.  (required)
        :param float rate_plan_count: The number of rates to return per property. This will return the lowest rate first, on up to the highest rate. The lowest rate has been proven to provide the best conversion rate and so a value of 1 is recommended.  The value must be greater than 0.  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: Shop calls have a test header that can be used to return set responses with the following keywords:<br> * `standard` * `service_unavailable` * `unknown_internal_error` 
        :param list[str] filter: Single filter type. Send multiple instances of this parameter to request multiple filters.<br> * `refundable` - Filters results to only show fully refundable rates. * `expedia_collect` - Filters results to only show rates where payment is collected by Expedia at the time of booking. These properties can be eligible for payments via Expedia Affiliate Collect(EAC). * `property_collect` - Filters results to only show rates where payment is collected by the property after booking. This can include rates that require a deposit by the property, dependent upon the deposit policies.  Example: `filter=refundable&filter=expedia_collect` 
        :param list[str] rate_option: Request specific rate options for each property. Send multiple instances of this parameter to request multiple rate options. Accepted values:<br> * `closed_user_group` - Return closed user group rates for each property. This feature must be enabled and requires a user to be logged in to request these rates. * `net_rates` - Return net rates for each property. This feature must be enabled to request these rates. * `cross_sell` - Identify if the traffic is coming from a cross sell booking. Where the traveler has booked another service (flight, car, activities...) before hotel.  Example: `rate_option=closed_user_group&rate_option=net_rates` 
        :param str billing_terms: This parameter is to specify the terms of how a resulting booking should be billed. If this field is needed, the value for this will be provided to you separately. 
        :param str payment_terms: This parameter is to specify what terms should be used when being paid for a resulting booking. If this field is needed, the value for this will be provided to you separately. 
        :param str partner_point_of_sale: This parameter is to specify what point of sale is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :param str platform_name: This parameter is to specify what platform is being used to shop and book. If this field is needed, the value for this will be provided to you separately. 
        :return: PropertyAvailabilities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'checkin', 'checkout', 'currency', 'language', 'country_code', 'occupancy', 'property_id', 'sales_channel', 'sales_environment', 'sort_type', 'rate_plan_count', 'customer_ip', 'customer_session_id', 'test', 'filter', 'rate_option', 'billing_terms', 'payment_terms', 'partner_point_of_sale', 'platform_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_availability_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'checkin' is set
        if ('checkin' not in params or
                params['checkin'] is None):
            raise ValueError("Missing the required parameter `checkin` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'checkout' is set
        if ('checkout' not in params or
                params['checkout'] is None):
            raise ValueError("Missing the required parameter `checkout` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'currency' is set
        if ('currency' not in params or
                params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'language' is set
        if ('language' not in params or
                params['language'] is None):
            raise ValueError("Missing the required parameter `language` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params or
                params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'occupancy' is set
        if ('occupancy' not in params or
                params['occupancy'] is None):
            raise ValueError("Missing the required parameter `occupancy` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'sales_channel' is set
        if ('sales_channel' not in params or
                params['sales_channel'] is None):
            raise ValueError("Missing the required parameter `sales_channel` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'sales_environment' is set
        if ('sales_environment' not in params or
                params['sales_environment'] is None):
            raise ValueError("Missing the required parameter `sales_environment` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'sort_type' is set
        if ('sort_type' not in params or
                params['sort_type'] is None):
            raise ValueError("Missing the required parameter `sort_type` when calling `properties_availability_get`")  # noqa: E501
        # verify the required parameter 'rate_plan_count' is set
        if ('rate_plan_count' not in params or
                params['rate_plan_count'] is None):
            raise ValueError("Missing the required parameter `rate_plan_count` when calling `properties_availability_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'checkin' in params:
            query_params.append(('checkin', params['checkin']))  # noqa: E501
        if 'checkout' in params:
            query_params.append(('checkout', params['checkout']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'country_code' in params:
            query_params.append(('country_code', params['country_code']))  # noqa: E501
        if 'occupancy' in params:
            query_params.append(('occupancy', params['occupancy']))  # noqa: E501
            collection_formats['occupancy'] = 'multi'  # noqa: E501
        if 'property_id' in params:
            query_params.append(('property_id', params['property_id']))  # noqa: E501
            collection_formats['property_id'] = 'multi'  # noqa: E501
        if 'sales_channel' in params:
            query_params.append(('sales_channel', params['sales_channel']))  # noqa: E501
        if 'sales_environment' in params:
            query_params.append(('sales_environment', params['sales_environment']))  # noqa: E501
        if 'sort_type' in params:
            query_params.append(('sort_type', params['sort_type']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'rate_plan_count' in params:
            query_params.append(('rate_plan_count', params['rate_plan_count']))  # noqa: E501
        if 'rate_option' in params:
            query_params.append(('rate_option', params['rate_option']))  # noqa: E501
            collection_formats['rate_option'] = 'multi'  # noqa: E501
        if 'billing_terms' in params:
            query_params.append(('billing_terms', params['billing_terms']))  # noqa: E501
        if 'payment_terms' in params:
            query_params.append(('payment_terms', params['payment_terms']))  # noqa: E501
        if 'partner_point_of_sale' in params:
            query_params.append(('partner_point_of_sale', params['partner_point_of_sale']))  # noqa: E501
        if 'platform_name' in params:
            query_params.append(('platform_name', params['platform_name']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/properties/availability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyAvailabilities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def properties_property_id_deposit_policies_get(self, accept, accept_encoding, authorization, user_agent, property_id, token, **kwargs):  # noqa: E501
        """Get Deposit Policy  # noqa: E501

        This link will be available in the shop response when rates require a deposit. It returns the amounts and dates for when any deposits are due. Deposit information is obtained by making a deposit-policies API call using this link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_property_id_deposit_policies_get(accept, accept_encoding, authorization, user_agent, property_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str property_id: Expedia Property ID.<br> Example: `19248`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: Deposit policies calls have a test header that can be used to return set responses with the following keywords: * `all` * `nights` * `amount` * `percent` * `remainder` * `service_unavailable` * `unknown_internal_error` 
        :return: DepositPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.properties_property_id_deposit_policies_get_with_http_info(accept, accept_encoding, authorization, user_agent, property_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.properties_property_id_deposit_policies_get_with_http_info(accept, accept_encoding, authorization, user_agent, property_id, token, **kwargs)  # noqa: E501
            return data

    def properties_property_id_deposit_policies_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, property_id, token, **kwargs):  # noqa: E501
        """Get Deposit Policy  # noqa: E501

        This link will be available in the shop response when rates require a deposit. It returns the amounts and dates for when any deposits are due. Deposit information is obtained by making a deposit-policies API call using this link.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_property_id_deposit_policies_get_with_http_info(accept, accept_encoding, authorization, user_agent, property_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str property_id: Expedia Property ID.<br> Example: `19248`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: Deposit policies calls have a test header that can be used to return set responses with the following keywords: * `all` * `nights` * `amount` * `percent` * `remainder` * `service_unavailable` * `unknown_internal_error` 
        :return: DepositPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'property_id', 'token', 'customer_ip', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_property_id_deposit_policies_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `properties_property_id_deposit_policies_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `properties_property_id_deposit_policies_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `properties_property_id_deposit_policies_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `properties_property_id_deposit_policies_get`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `properties_property_id_deposit_policies_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `properties_property_id_deposit_policies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_id' in params:
            path_params['property_id'] = params['property_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/properties/{property_id}/deposit-policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DepositPolicies',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def properties_property_id_payment_options_get(self, accept, accept_encoding, authorization, property_id, token, user_agent, **kwargs):  # noqa: E501
        """Get Accepted Payment Types - EPS MOR Only  # noqa: E501

        Returns the accepted payment options.  Use this API to power your checkout page and display valid forms of payment, ensuring a smooth booking.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_property_id_payment_options_get(accept, accept_encoding, authorization, property_id, token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str property_id: Expedia Property ID.<br> Example: `19248`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :return: PaymentOption
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.properties_property_id_payment_options_get_with_http_info(accept, accept_encoding, authorization, property_id, token, user_agent, **kwargs)  # noqa: E501
        else:
            (data) = self.properties_property_id_payment_options_get_with_http_info(accept, accept_encoding, authorization, property_id, token, user_agent, **kwargs)  # noqa: E501
            return data

    def properties_property_id_payment_options_get_with_http_info(self, accept, accept_encoding, authorization, property_id, token, user_agent, **kwargs):  # noqa: E501
        """Get Accepted Payment Types - EPS MOR Only  # noqa: E501

        Returns the accepted payment options.  Use this API to power your checkout page and display valid forms of payment, ensuring a smooth booking.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_property_id_payment_options_get_with_http_info(accept, accept_encoding, authorization, property_id, token, user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str property_id: Expedia Property ID.<br> Example: `19248`  (required)
        :param str token: Provided as part of the link object and used to maintain state across calls. This simplifies each subsequent call by limiting the amount of information required at each step and reduces the potential for errors. Token values cannot be viewed or changed. Example: `MY5S3j36cOcLfLBZjPYQ1abhfc8CqmjmFVzkk7euvWaunE57LLeDgaxm516m`  (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :return: PaymentOption
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'property_id', 'token', 'user_agent', 'customer_ip', 'customer_session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_property_id_payment_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `properties_property_id_payment_options_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `properties_property_id_payment_options_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `properties_property_id_payment_options_get`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `properties_property_id_payment_options_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `properties_property_id_payment_options_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `properties_property_id_payment_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_id' in params:
            path_params['property_id'] = params['property_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/properties/{property_id}/payment-options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentOption',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def properties_property_id_rooms_room_id_rates_rate_id_price_check_get(self, accept, accept_encoding, authorization, user_agent, property_id, room_id, rate_id, token, **kwargs):  # noqa: E501
        """Get Current Price for Pre-Booking  # noqa: E501

        Confirms the price returned by the Property Availability response. Use this API to verify a previously-selected rate is still valid before booking. If the price is matched, the response returns a link to request a booking. If the price has changed, the response returns new price details and a booking link for the new price. If the rate is no longer available, the response will return a new Property Availability request link to search again for different rates. In the event of a price change, go back to Property Availability and book the property at the new price or return to additional rates for the property.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_property_id_rooms_room_id_rates_rate_id_price_check_get(accept, accept_encoding, authorization, user_agent, property_id, room_id, rate_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str property_id: Expedia Property ID.<br> Example: `19248`  (required)
        :param str room_id: Room ID of a property.<br> Example: `123abc`.  (required)
        :param str rate_id: Rate ID of a room.<br> Example: `123abc`  (required)
        :param str token: A hashed collection of query parameters. Used to maintain state across calls. This token is provided as part of the price check link from the shop response. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: Price check calls have a test header that can be used to return set responses with the following keywords:   * `matched`   * `price_changed`   * `sold_out`   * `service_unavailable`   * `unknown_internal_error` 
        :return: RoomPriceCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.properties_property_id_rooms_room_id_rates_rate_id_price_check_get_with_http_info(accept, accept_encoding, authorization, user_agent, property_id, room_id, rate_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.properties_property_id_rooms_room_id_rates_rate_id_price_check_get_with_http_info(accept, accept_encoding, authorization, user_agent, property_id, room_id, rate_id, token, **kwargs)  # noqa: E501
            return data

    def properties_property_id_rooms_room_id_rates_rate_id_price_check_get_with_http_info(self, accept, accept_encoding, authorization, user_agent, property_id, room_id, rate_id, token, **kwargs):  # noqa: E501
        """Get Current Price for Pre-Booking  # noqa: E501

        Confirms the price returned by the Property Availability response. Use this API to verify a previously-selected rate is still valid before booking. If the price is matched, the response returns a link to request a booking. If the price has changed, the response returns new price details and a booking link for the new price. If the rate is no longer available, the response will return a new Property Availability request link to search again for different rates. In the event of a price change, go back to Property Availability and book the property at the new price or return to additional rates for the property.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.properties_property_id_rooms_room_id_rates_rate_id_price_check_get_with_http_info(accept, accept_encoding, authorization, user_agent, property_id, room_id, rate_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept: Must be `application/json` (required)
        :param str accept_encoding: Must be `gzip` (required)
        :param str authorization: The custom generated authentication header. Refer to our [signature authentication](https://developer.expediapartnersolutions.com/reference/signature-authentication) page for full details. (required)
        :param str user_agent: The `User-Agent` header string from the customer's request, as captured by your integration. If you are building an application then the `User-Agent` value should be `{app name}/{app version}`.  Example: `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36`  Example: `TravelNow/3.30.112`  (required)
        :param str property_id: Expedia Property ID.<br> Example: `19248`  (required)
        :param str room_id: Room ID of a property.<br> Example: `123abc`.  (required)
        :param str rate_id: Rate ID of a room.<br> Example: `123abc`  (required)
        :param str token: A hashed collection of query parameters. Used to maintain state across calls. This token is provided as part of the price check link from the shop response. (required)
        :param str customer_ip: IP address of the customer, as captured by your integration. Send IPV4 addresses only.<br> Ensure your integration passes the customer's IP, not your own. This value helps determine their location and assign the correct payment gateway.<br> Also used for fraud recovery and other important analytics. 
        :param str customer_session_id: Insert your own unique value for each user session, beginning with the first API call. Continue to pass the same value for each subsequent API call during the user's session, using a new value for every new customer session.<br> Including this value greatly eases EPS's internal debugging process for issues with partner requests, as it explicitly links together request paths for individual user's session. 
        :param str test: Price check calls have a test header that can be used to return set responses with the following keywords:   * `matched`   * `price_changed`   * `sold_out`   * `service_unavailable`   * `unknown_internal_error` 
        :return: RoomPriceCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'accept_encoding', 'authorization', 'user_agent', 'property_id', 'room_id', 'rate_id', 'token', 'customer_ip', 'customer_session_id', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_property_id_rooms_room_id_rates_rate_id_price_check_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if ('accept_encoding' not in params or
                params['accept_encoding'] is None):
            raise ValueError("Missing the required parameter `accept_encoding` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'user_agent' is set
        if ('user_agent' not in params or
                params['user_agent'] is None):
            raise ValueError("Missing the required parameter `user_agent` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'room_id' is set
        if ('room_id' not in params or
                params['room_id'] is None):
            raise ValueError("Missing the required parameter `room_id` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'rate_id' is set
        if ('rate_id' not in params or
                params['rate_id'] is None):
            raise ValueError("Missing the required parameter `rate_id` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `properties_property_id_rooms_room_id_rates_rate_id_price_check_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_id' in params:
            path_params['property_id'] = params['property_id']  # noqa: E501
        if 'room_id' in params:
            path_params['room_id'] = params['room_id']  # noqa: E501
        if 'rate_id' in params:
            path_params['rate_id'] = params['rate_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'accept_encoding' in params:
            header_params['Accept-Encoding'] = params['accept_encoding']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'customer_ip' in params:
            header_params['Customer-Ip'] = params['customer_ip']  # noqa: E501
        if 'customer_session_id' in params:
            header_params['Customer-Session-Id'] = params['customer_session_id']  # noqa: E501
        if 'user_agent' in params:
            header_params['User-Agent'] = params['user_agent']  # noqa: E501
        if 'test' in params:
            header_params['Test'] = params['test']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/properties/{property_id}/rooms/{room_id}/rates/{rate_id}/price-check', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoomPriceCheck',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
